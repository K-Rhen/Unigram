// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLWebPage : ITLWebPageBase, TLWebPage 
	{
		public bool HasType { get { return Flags.HasFlag(TLWebPageFlag.Type); } set { Flags = value ? (Flags | TLWebPageFlag.Type) : (Flags & ~TLWebPageFlag.Type); } }
		public bool HasSiteName { get { return Flags.HasFlag(TLWebPageFlag.SiteName); } set { Flags = value ? (Flags | TLWebPageFlag.SiteName) : (Flags & ~TLWebPageFlag.SiteName); } }
		public bool HasTitle { get { return Flags.HasFlag(TLWebPageFlag.Title); } set { Flags = value ? (Flags | TLWebPageFlag.Title) : (Flags & ~TLWebPageFlag.Title); } }
		public bool HasDescription { get { return Flags.HasFlag(TLWebPageFlag.Description); } set { Flags = value ? (Flags | TLWebPageFlag.Description) : (Flags & ~TLWebPageFlag.Description); } }
		public bool HasPhoto { get { return Flags.HasFlag(TLWebPageFlag.Photo); } set { Flags = value ? (Flags | TLWebPageFlag.Photo) : (Flags & ~TLWebPageFlag.Photo); } }
		public bool HasEmbedUrl { get { return Flags.HasFlag(TLWebPageFlag.EmbedUrl); } set { Flags = value ? (Flags | TLWebPageFlag.EmbedUrl) : (Flags & ~TLWebPageFlag.EmbedUrl); } }
		public bool HasEmbedType { get { return Flags.HasFlag(TLWebPageFlag.EmbedType); } set { Flags = value ? (Flags | TLWebPageFlag.EmbedType) : (Flags & ~TLWebPageFlag.EmbedType); } }
		public bool HasEmbedWidth { get { return Flags.HasFlag(TLWebPageFlag.EmbedWidth); } set { Flags = value ? (Flags | TLWebPageFlag.EmbedWidth) : (Flags & ~TLWebPageFlag.EmbedWidth); } }
		public bool HasEmbedHeight { get { return Flags.HasFlag(TLWebPageFlag.EmbedHeight); } set { Flags = value ? (Flags | TLWebPageFlag.EmbedHeight) : (Flags & ~TLWebPageFlag.EmbedHeight); } }
		public bool HasDuration { get { return Flags.HasFlag(TLWebPageFlag.Duration); } set { Flags = value ? (Flags | TLWebPageFlag.Duration) : (Flags & ~TLWebPageFlag.Duration); } }
		public bool HasAuthor { get { return Flags.HasFlag(TLWebPageFlag.Author); } set { Flags = value ? (Flags | TLWebPageFlag.Author) : (Flags & ~TLWebPageFlag.Author); } }
		public bool HasDocument { get { return Flags.HasFlag(TLWebPageFlag.Document); } set { Flags = value ? (Flags | TLWebPageFlag.Document) : (Flags & ~TLWebPageFlag.Document); } }
		public bool HasCachedPage { get { return Flags.HasFlag(TLWebPageFlag.CachedPage); } set { Flags = value ? (Flags | TLWebPageFlag.CachedPage) : (Flags & ~TLWebPageFlag.CachedPage); } }

		public TLWebPageFlag Flags { get; set; }
		public String Url { get; set; }
		public String DisplayUrl { get; set; }
		public Int32 Hash { get; set; }
		public String Type { get; set; }
		public String SiteName { get; set; }
		public String Title { get; set; }
		public String Description { get; set; }
		public TLPhotoBase Photo { get; set; }
		public String EmbedUrl { get; set; }
		public String EmbedType { get; set; }
		public Int32? EmbedWidth { get; set; }
		public Int32? EmbedHeight { get; set; }
		public Int32? Duration { get; set; }
		public String Author { get; set; }
		public TLDocumentBase Document { get; set; }
		public TLPageBase CachedPage { get; set; }

		public ITLWebPage() { }
		public ITLWebPage(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.WebPage; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLWebPageFlag)from.ReadInt32();
			Id = from.ReadInt64();
			Url = from.ReadString();
			DisplayUrl = from.ReadString();
			Hash = from.ReadInt32();
			if (HasType) Type = from.ReadString();
			if (HasSiteName) SiteName = from.ReadString();
			if (HasTitle) Title = from.ReadString();
			if (HasDescription) Description = from.ReadString();
			if (HasPhoto) Photo = TLFactory.Read<TLPhotoBase>(from);
			if (HasEmbedUrl) EmbedUrl = from.ReadString();
			if (HasEmbedType) EmbedType = from.ReadString();
			if (HasEmbedWidth) EmbedWidth = from.ReadInt32();
			if (HasEmbedHeight) EmbedHeight = from.ReadInt32();
			if (HasDuration) Duration = from.ReadInt32();
			if (HasAuthor) Author = from.ReadString();
			if (HasDocument) Document = TLFactory.Read<TLDocumentBase>(from);
			if (HasCachedPage) CachedPage = TLFactory.Read<TLPageBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x5F07B4BC);
			to.Write((Int32)Flags);
			to.Write(Id);
			to.Write(Url);
			to.Write(DisplayUrl);
			to.Write(Hash);
			if (HasType) to.Write(Type);
			if (HasSiteName) to.Write(SiteName);
			if (HasTitle) to.Write(Title);
			if (HasDescription) to.Write(Description);
			if (HasPhoto) to.WriteObject(Photo);
			if (HasEmbedUrl) to.Write(EmbedUrl);
			if (HasEmbedType) to.Write(EmbedType);
			if (HasEmbedWidth) to.Write(EmbedWidth.Value);
			if (HasEmbedHeight) to.Write(EmbedHeight.Value);
			if (HasDuration) to.Write(Duration.Value);
			if (HasAuthor) to.Write(Author);
			if (HasDocument) to.WriteObject(Document);
			if (HasCachedPage) to.WriteObject(CachedPage);
		}

		private void UpdateFlags()
		{
			HasType = Type != null;
			HasSiteName = SiteName != null;
			HasTitle = Title != null;
			HasDescription = Description != null;
			HasPhoto = Photo != null;
			HasEmbedUrl = EmbedUrl != null;
			HasEmbedType = EmbedType != null;
			HasEmbedWidth = EmbedWidth != null;
			HasEmbedHeight = EmbedHeight != null;
			HasDuration = Duration != null;
			HasAuthor = Author != null;
			HasDocument = Document != null;
			HasCachedPage = CachedPage != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLWebPageFlag : Int32
	{
		Type = (1 << 0),
		SiteName = (1 << 1),
		Title = (1 << 2),
		Description = (1 << 3),
		Photo = (1 << 4),
		EmbedUrl = (1 << 5),
		EmbedType = (1 << 5),
		EmbedWidth = (1 << 6),
		EmbedHeight = (1 << 6),
		Duration = (1 << 7),
		Author = (1 << 8),
		Document = (1 << 9),
		CachedPage = (1 << 10),
	}
#endif

#if !PORTABLE
	[Guid(0x74412133, 0xc889, 0xfc4d, 0x30, 0x31, 0x61, 0xe1, 0x14, 0xb7, 0x72, 0xf2)]
	public partial interface TLWebPage : TLWebPageBase
	{
		bool HasType { get; set; }
		bool HasSiteName { get; set; }
		bool HasTitle { get; set; }
		bool HasDescription { get; set; }
		bool HasPhoto { get; set; }
		bool HasEmbedUrl { get; set; }
		bool HasEmbedType { get; set; }
		bool HasEmbedWidth { get; set; }
		bool HasEmbedHeight { get; set; }
		bool HasDuration { get; set; }
		bool HasAuthor { get; set; }
		bool HasDocument { get; set; }
		bool HasCachedPage { get; set; }

		TLWebPageFlag Flags { get; set; }
		Int64 Id { get; set; }
		String Url { get; set; }
		String DisplayUrl { get; set; }
		Int32 Hash { get; set; }
		String Type { get; set; }
		String SiteName { get; set; }
		String Title { get; set; }
		String Description { get; set; }
		TLPhotoBase Photo { get; set; }
		String EmbedUrl { get; set; }
		String EmbedType { get; set; }
		Int32? EmbedWidth { get; set; }
		Int32? EmbedHeight { get; set; }
		Int32? Duration { get; set; }
		String Author { get; set; }
		TLDocumentBase Document { get; set; }
		TLPageBase CachedPage { get; set; }
	}
#endif

}