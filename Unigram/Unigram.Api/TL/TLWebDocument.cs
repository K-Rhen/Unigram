// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLWebDocument : ITLObject, TLWebDocument 
	{
		public String Url { get; set; }
		public Int64 AccessHash { get; set; }
		public Int32 Size { get; set; }
		public String MimeType { get; set; }
		public TLVector<TLDocumentAttributeBase> Attributes { get; set; }
		public Int32 DCId { get; set; }

		public ITLWebDocument() { }
		public ITLWebDocument(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.WebDocument; } }

		public override void Read(TLBinaryReader from)
		{
			Url = from.ReadString();
			AccessHash = from.ReadInt64();
			Size = from.ReadInt32();
			MimeType = from.ReadString();
			Attributes = TLFactory.Read<TLVector<TLDocumentAttributeBase>>(from);
			DCId = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xC61ACBD8);
			to.Write(Url);
			to.Write(AccessHash);
			to.Write(Size);
			to.Write(MimeType);
			to.WriteObject(Attributes);
			to.Write(DCId);
		}
	}

#if !PORTABLE
	[Guid(0x88e0bde3, 0xd02c, 0x7eea, 0x4d, 0x01, 0x3f, 0xa0, 0x34, 0xe8, 0xb7, 0x76)]
	public partial interface TLWebDocument : TLObject
	{
		String Url { get; set; }
		Int64 AccessHash { get; set; }
		Int32 Size { get; set; }
		String MimeType { get; set; }
		TLVector<TLDocumentAttributeBase> Attributes { get; set; }
		Int32 DCId { get; set; }
	}
#endif

}