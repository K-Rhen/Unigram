// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLUpdateShortMessage : ITLUpdatesBase, TLUpdateShortMessage, ITLMultiPts 
	{
		public bool IsOut { get { return Flags.HasFlag(TLUpdateShortMessageFlag.Out); } set { Flags = value ? (Flags | TLUpdateShortMessageFlag.Out) : (Flags & ~TLUpdateShortMessageFlag.Out); } }
		public bool IsMentioned { get { return Flags.HasFlag(TLUpdateShortMessageFlag.Mentioned); } set { Flags = value ? (Flags | TLUpdateShortMessageFlag.Mentioned) : (Flags & ~TLUpdateShortMessageFlag.Mentioned); } }
		public bool IsMediaUnread { get { return Flags.HasFlag(TLUpdateShortMessageFlag.MediaUnread); } set { Flags = value ? (Flags | TLUpdateShortMessageFlag.MediaUnread) : (Flags & ~TLUpdateShortMessageFlag.MediaUnread); } }
		public bool IsSilent { get { return Flags.HasFlag(TLUpdateShortMessageFlag.Silent); } set { Flags = value ? (Flags | TLUpdateShortMessageFlag.Silent) : (Flags & ~TLUpdateShortMessageFlag.Silent); } }
		public bool HasFwdFrom { get { return Flags.HasFlag(TLUpdateShortMessageFlag.FwdFrom); } set { Flags = value ? (Flags | TLUpdateShortMessageFlag.FwdFrom) : (Flags & ~TLUpdateShortMessageFlag.FwdFrom); } }
		public bool HasViaBotId { get { return Flags.HasFlag(TLUpdateShortMessageFlag.ViaBotId); } set { Flags = value ? (Flags | TLUpdateShortMessageFlag.ViaBotId) : (Flags & ~TLUpdateShortMessageFlag.ViaBotId); } }
		public bool HasReplyToMsgId { get { return Flags.HasFlag(TLUpdateShortMessageFlag.ReplyToMsgId); } set { Flags = value ? (Flags | TLUpdateShortMessageFlag.ReplyToMsgId) : (Flags & ~TLUpdateShortMessageFlag.ReplyToMsgId); } }
		public bool HasEntities { get { return Flags.HasFlag(TLUpdateShortMessageFlag.Entities); } set { Flags = value ? (Flags | TLUpdateShortMessageFlag.Entities) : (Flags & ~TLUpdateShortMessageFlag.Entities); } }

		public TLUpdateShortMessageFlag Flags { get; set; }
		public Int32 Id { get; set; }
		public Int32 UserId { get; set; }
		public String Message { get; set; }
		public Int32 Pts { get; set; }
		public Int32 PtsCount { get; set; }
		public Int32 Date { get; set; }
		public TLMessageFwdHeader FwdFrom { get; set; }
		public Int32? ViaBotId { get; set; }
		public Int32? ReplyToMsgId { get; set; }
		public TLVector<TLMessageEntityBase> Entities { get; set; }

		public ITLUpdateShortMessage() { }
		public ITLUpdateShortMessage(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.UpdateShortMessage; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLUpdateShortMessageFlag)from.ReadInt32();
			Id = from.ReadInt32();
			UserId = from.ReadInt32();
			Message = from.ReadString();
			Pts = from.ReadInt32();
			PtsCount = from.ReadInt32();
			Date = from.ReadInt32();
			if (HasFwdFrom) FwdFrom = TLFactory.Read<TLMessageFwdHeader>(from);
			if (HasViaBotId) ViaBotId = from.ReadInt32();
			if (HasReplyToMsgId) ReplyToMsgId = from.ReadInt32();
			if (HasEntities) Entities = TLFactory.Read<TLVector<TLMessageEntityBase>>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x914FBF11);
			to.Write((Int32)Flags);
			to.Write(Id);
			to.Write(UserId);
			to.Write(Message);
			to.Write(Pts);
			to.Write(PtsCount);
			to.Write(Date);
			if (HasFwdFrom) to.WriteObject(FwdFrom);
			if (HasViaBotId) to.Write(ViaBotId.Value);
			if (HasReplyToMsgId) to.Write(ReplyToMsgId.Value);
			if (HasEntities) to.WriteObject(Entities);
		}

		private void UpdateFlags()
		{
			HasFwdFrom = FwdFrom != null;
			HasViaBotId = ViaBotId != null;
			HasReplyToMsgId = ReplyToMsgId != null;
			HasEntities = Entities != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLUpdateShortMessageFlag : Int32
	{
		Out = (1 << 1),
		Mentioned = (1 << 4),
		MediaUnread = (1 << 5),
		Silent = (1 << 13),
		FwdFrom = (1 << 2),
		ViaBotId = (1 << 11),
		ReplyToMsgId = (1 << 3),
		Entities = (1 << 7),
	}
#endif

#if !PORTABLE
	[Guid(0xd35752d0, 0x0452, 0x6165, 0xb5, 0xbf, 0xa2, 0x65, 0x03, 0x22, 0xd8, 0x2d)]
	public partial interface TLUpdateShortMessage : TLUpdatesBase
	{
		bool IsOut { get; set; }
		bool IsMentioned { get; set; }
		bool IsMediaUnread { get; set; }
		bool IsSilent { get; set; }
		bool HasFwdFrom { get; set; }
		bool HasViaBotId { get; set; }
		bool HasReplyToMsgId { get; set; }
		bool HasEntities { get; set; }

		TLUpdateShortMessageFlag Flags { get; set; }
		Int32 Id { get; set; }
		Int32 UserId { get; set; }
		String Message { get; set; }
		Int32 Pts { get; set; }
		Int32 PtsCount { get; set; }
		Int32 Date { get; set; }
		TLMessageFwdHeader FwdFrom { get; set; }
		Int32? ViaBotId { get; set; }
		Int32? ReplyToMsgId { get; set; }
		TLVector<TLMessageEntityBase> Entities { get; set; }
	}
#endif

}