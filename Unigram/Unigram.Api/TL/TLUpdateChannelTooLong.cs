// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLUpdateChannelTooLong : ITLUpdateBase, TLUpdateChannelTooLong 
	{
		public bool HasPts { get { return Flags.HasFlag(TLUpdateChannelTooLongFlag.Pts); } set { Flags = value ? (Flags | TLUpdateChannelTooLongFlag.Pts) : (Flags & ~TLUpdateChannelTooLongFlag.Pts); } }

		public TLUpdateChannelTooLongFlag Flags { get; set; }
		public Int32 ChannelId { get; set; }
		public Int32? Pts { get; set; }

		public ITLUpdateChannelTooLong() { }
		public ITLUpdateChannelTooLong(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.UpdateChannelTooLong; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLUpdateChannelTooLongFlag)from.ReadInt32();
			ChannelId = from.ReadInt32();
			if (HasPts) Pts = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0xEB0467FB);
			to.Write((Int32)Flags);
			to.Write(ChannelId);
			if (HasPts) to.Write(Pts.Value);
		}

		private void UpdateFlags()
		{
			HasPts = Pts != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLUpdateChannelTooLongFlag : Int32
	{
		Pts = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0x8340c33a, 0x292f, 0x15c1, 0x38, 0xfb, 0xe2, 0xd6, 0xf7, 0x5e, 0x8b, 0xcc)]
	public partial interface TLUpdateChannelTooLong : TLUpdateBase
	{
		bool HasPts { get; set; }

		TLUpdateChannelTooLongFlag Flags { get; set; }
		Int32 ChannelId { get; set; }
		Int32? Pts { get; set; }
	}
#endif

}