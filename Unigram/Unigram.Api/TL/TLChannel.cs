// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLChannel : ITLChatBase, TLChannel 
	{
		public bool IsCreator { get { return Flags.HasFlag(TLChannelFlag.Creator); } set { Flags = value ? (Flags | TLChannelFlag.Creator) : (Flags & ~TLChannelFlag.Creator); } }
		public bool IsKicked { get { return Flags.HasFlag(TLChannelFlag.Kicked); } set { Flags = value ? (Flags | TLChannelFlag.Kicked) : (Flags & ~TLChannelFlag.Kicked); } }
		public bool IsLeft { get { return Flags.HasFlag(TLChannelFlag.Left); } set { Flags = value ? (Flags | TLChannelFlag.Left) : (Flags & ~TLChannelFlag.Left); } }
		public bool IsEditor { get { return Flags.HasFlag(TLChannelFlag.Editor); } set { Flags = value ? (Flags | TLChannelFlag.Editor) : (Flags & ~TLChannelFlag.Editor); } }
		public bool IsModerator { get { return Flags.HasFlag(TLChannelFlag.Moderator); } set { Flags = value ? (Flags | TLChannelFlag.Moderator) : (Flags & ~TLChannelFlag.Moderator); } }
		public bool IsBroadcast { get { return Flags.HasFlag(TLChannelFlag.Broadcast); } set { Flags = value ? (Flags | TLChannelFlag.Broadcast) : (Flags & ~TLChannelFlag.Broadcast); } }
		public bool IsVerified { get { return Flags.HasFlag(TLChannelFlag.Verified); } set { Flags = value ? (Flags | TLChannelFlag.Verified) : (Flags & ~TLChannelFlag.Verified); } }
		public bool IsMegaGroup { get { return Flags.HasFlag(TLChannelFlag.MegaGroup); } set { Flags = value ? (Flags | TLChannelFlag.MegaGroup) : (Flags & ~TLChannelFlag.MegaGroup); } }
		public bool IsRestricted { get { return Flags.HasFlag(TLChannelFlag.Restricted); } set { Flags = value ? (Flags | TLChannelFlag.Restricted) : (Flags & ~TLChannelFlag.Restricted); } }
		public bool IsDemocracy { get { return Flags.HasFlag(TLChannelFlag.Democracy); } set { Flags = value ? (Flags | TLChannelFlag.Democracy) : (Flags & ~TLChannelFlag.Democracy); } }
		public bool IsSignatures { get { return Flags.HasFlag(TLChannelFlag.Signatures); } set { Flags = value ? (Flags | TLChannelFlag.Signatures) : (Flags & ~TLChannelFlag.Signatures); } }
		public bool IsMin { get { return Flags.HasFlag(TLChannelFlag.Min); } set { Flags = value ? (Flags | TLChannelFlag.Min) : (Flags & ~TLChannelFlag.Min); } }
		public bool HasAccessHash { get { return Flags.HasFlag(TLChannelFlag.AccessHash); } set { Flags = value ? (Flags | TLChannelFlag.AccessHash) : (Flags & ~TLChannelFlag.AccessHash); } }
		public bool HasUsername { get { return Flags.HasFlag(TLChannelFlag.Username); } set { Flags = value ? (Flags | TLChannelFlag.Username) : (Flags & ~TLChannelFlag.Username); } }
		public bool HasRestrictionReason { get { return Flags.HasFlag(TLChannelFlag.RestrictionReason); } set { Flags = value ? (Flags | TLChannelFlag.RestrictionReason) : (Flags & ~TLChannelFlag.RestrictionReason); } }

		public TLChannelFlag Flags { get; set; }
		public Int64? AccessHash { get; set; }
		public String Title { get; set; }
		public String Username { get; set; }
		public TLChatPhotoBase Photo { get; set; }
		public Int32 Date { get; set; }
		public Int32 Version { get; set; }
		public String RestrictionReason { get; set; }

		public ITLChannel() { }
		public ITLChannel(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.Channel; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLChannelFlag)from.ReadInt32();
			Id = from.ReadInt32();
			if (HasAccessHash) AccessHash = from.ReadInt64();
			Title = from.ReadString();
			if (HasUsername) Username = from.ReadString();
			Photo = TLFactory.Read<TLChatPhotoBase>(from);
			Date = from.ReadInt32();
			Version = from.ReadInt32();
			if (HasRestrictionReason) RestrictionReason = from.ReadString();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0xA14DCA52);
			to.Write((Int32)Flags);
			to.Write(Id);
			if (HasAccessHash) to.Write(AccessHash.Value);
			to.Write(Title);
			if (HasUsername) to.Write(Username);
			to.WriteObject(Photo);
			to.Write(Date);
			to.Write(Version);
			if (HasRestrictionReason) to.Write(RestrictionReason);
		}

		private void UpdateFlags()
		{
			HasAccessHash = AccessHash != null;
			HasUsername = Username != null;
			HasRestrictionReason = RestrictionReason != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLChannelFlag : Int32
	{
		Creator = (1 << 0),
		Kicked = (1 << 1),
		Left = (1 << 2),
		Editor = (1 << 3),
		Moderator = (1 << 4),
		Broadcast = (1 << 5),
		Verified = (1 << 7),
		MegaGroup = (1 << 8),
		Restricted = (1 << 9),
		Democracy = (1 << 10),
		Signatures = (1 << 11),
		Min = (1 << 12),
		AccessHash = (1 << 13),
		Username = (1 << 6),
		RestrictionReason = (1 << 9),
	}
#endif

#if !PORTABLE
	[Guid(0xebf38aaa, 0x48e1, 0xa731, 0xcd, 0x1b, 0x6d, 0x13, 0x83, 0xa0, 0x37, 0x55)]
	public partial interface TLChannel : TLChatBase
	{
		bool IsCreator { get; set; }
		bool IsKicked { get; set; }
		bool IsLeft { get; set; }
		bool IsEditor { get; set; }
		bool IsModerator { get; set; }
		bool IsBroadcast { get; set; }
		bool IsVerified { get; set; }
		bool IsMegaGroup { get; set; }
		bool IsRestricted { get; set; }
		bool IsDemocracy { get; set; }
		bool IsSignatures { get; set; }
		bool IsMin { get; set; }
		bool HasAccessHash { get; set; }
		bool HasUsername { get; set; }
		bool HasRestrictionReason { get; set; }

		TLChannelFlag Flags { get; set; }
		Int32 Id { get; set; }
		Int64? AccessHash { get; set; }
		String Title { get; set; }
		String Username { get; set; }
		TLChatPhotoBase Photo { get; set; }
		Int32 Date { get; set; }
		Int32 Version { get; set; }
		String RestrictionReason { get; set; }
	}
#endif

}