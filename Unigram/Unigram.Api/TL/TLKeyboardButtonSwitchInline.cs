// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLKeyboardButtonSwitchInline : ITLKeyboardButtonBase, TLKeyboardButtonSwitchInline 
	{
		public bool IsSamePeer { get { return Flags.HasFlag(TLKeyboardButtonSwitchInlineFlag.SamePeer); } set { Flags = value ? (Flags | TLKeyboardButtonSwitchInlineFlag.SamePeer) : (Flags & ~TLKeyboardButtonSwitchInlineFlag.SamePeer); } }

		public TLKeyboardButtonSwitchInlineFlag Flags { get; set; }
		public String Query { get; set; }

		public ITLKeyboardButtonSwitchInline() { }
		public ITLKeyboardButtonSwitchInline(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.KeyboardButtonSwitchInline; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLKeyboardButtonSwitchInlineFlag)from.ReadInt32();
			Text = from.ReadString();
			Query = from.ReadString();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x568A748);
			to.Write((Int32)Flags);
			to.Write(Text);
			to.Write(Query);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLKeyboardButtonSwitchInlineFlag : Int32
	{
		SamePeer = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0x64b95636, 0x2de1, 0xcca8, 0xa8, 0xe8, 0xf3, 0xfa, 0x81, 0xc2, 0xe4, 0x8f)]
	public partial interface TLKeyboardButtonSwitchInline : TLKeyboardButtonBase
	{
		bool IsSamePeer { get; set; }

		TLKeyboardButtonSwitchInlineFlag Flags { get; set; }
		String Text { get; set; }
		String Query { get; set; }
	}
#endif

}