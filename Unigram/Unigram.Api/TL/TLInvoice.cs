// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLInvoice : ITLObject, TLInvoice 
	{
		public bool IsTest { get { return Flags.HasFlag(TLInvoiceFlag.Test); } set { Flags = value ? (Flags | TLInvoiceFlag.Test) : (Flags & ~TLInvoiceFlag.Test); } }
		public bool IsNameRequested { get { return Flags.HasFlag(TLInvoiceFlag.NameRequested); } set { Flags = value ? (Flags | TLInvoiceFlag.NameRequested) : (Flags & ~TLInvoiceFlag.NameRequested); } }
		public bool IsPhoneRequested { get { return Flags.HasFlag(TLInvoiceFlag.PhoneRequested); } set { Flags = value ? (Flags | TLInvoiceFlag.PhoneRequested) : (Flags & ~TLInvoiceFlag.PhoneRequested); } }
		public bool IsEmailRequested { get { return Flags.HasFlag(TLInvoiceFlag.EmailRequested); } set { Flags = value ? (Flags | TLInvoiceFlag.EmailRequested) : (Flags & ~TLInvoiceFlag.EmailRequested); } }
		public bool IsShippingAddressRequested { get { return Flags.HasFlag(TLInvoiceFlag.ShippingAddressRequested); } set { Flags = value ? (Flags | TLInvoiceFlag.ShippingAddressRequested) : (Flags & ~TLInvoiceFlag.ShippingAddressRequested); } }
		public bool IsFlexible { get { return Flags.HasFlag(TLInvoiceFlag.Flexible); } set { Flags = value ? (Flags | TLInvoiceFlag.Flexible) : (Flags & ~TLInvoiceFlag.Flexible); } }

		public TLInvoiceFlag Flags { get; set; }
		public String Currency { get; set; }
		public TLVector<TLLabeledPrice> Prices { get; set; }

		public ITLInvoice() { }
		public ITLInvoice(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.Invoice; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLInvoiceFlag)from.ReadInt32();
			Currency = from.ReadString();
			Prices = TLFactory.Read<TLVector<TLLabeledPrice>>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xC30AA358);
			to.Write((Int32)Flags);
			to.Write(Currency);
			to.WriteObject(Prices);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLInvoiceFlag : Int32
	{
		Test = (1 << 0),
		NameRequested = (1 << 1),
		PhoneRequested = (1 << 2),
		EmailRequested = (1 << 3),
		ShippingAddressRequested = (1 << 4),
		Flexible = (1 << 5),
	}
#endif

#if !PORTABLE
	[Guid(0xe06af9e5, 0x4304, 0x7387, 0x15, 0xfb, 0xb6, 0x4f, 0xd3, 0xd9, 0x00, 0x05)]
	public partial interface TLInvoice : TLObject
	{
		bool IsTest { get; set; }
		bool IsNameRequested { get; set; }
		bool IsPhoneRequested { get; set; }
		bool IsEmailRequested { get; set; }
		bool IsShippingAddressRequested { get; set; }
		bool IsFlexible { get; set; }

		TLInvoiceFlag Flags { get; set; }
		String Currency { get; set; }
		TLVector<TLLabeledPrice> Prices { get; set; }
	}
#endif

}