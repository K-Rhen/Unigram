// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLPageBlockEmbed : ITLPageBlockBase, TLPageBlockEmbed 
	{
		public bool IsFullWidth { get { return Flags.HasFlag(TLPageBlockEmbedFlag.FullWidth); } set { Flags = value ? (Flags | TLPageBlockEmbedFlag.FullWidth) : (Flags & ~TLPageBlockEmbedFlag.FullWidth); } }
		public bool IsAllowScrolling { get { return Flags.HasFlag(TLPageBlockEmbedFlag.AllowScrolling); } set { Flags = value ? (Flags | TLPageBlockEmbedFlag.AllowScrolling) : (Flags & ~TLPageBlockEmbedFlag.AllowScrolling); } }
		public bool HasUrl { get { return Flags.HasFlag(TLPageBlockEmbedFlag.Url); } set { Flags = value ? (Flags | TLPageBlockEmbedFlag.Url) : (Flags & ~TLPageBlockEmbedFlag.Url); } }
		public bool HasHtml { get { return Flags.HasFlag(TLPageBlockEmbedFlag.Html); } set { Flags = value ? (Flags | TLPageBlockEmbedFlag.Html) : (Flags & ~TLPageBlockEmbedFlag.Html); } }
		public bool HasPosterPhotoId { get { return Flags.HasFlag(TLPageBlockEmbedFlag.PosterPhotoId); } set { Flags = value ? (Flags | TLPageBlockEmbedFlag.PosterPhotoId) : (Flags & ~TLPageBlockEmbedFlag.PosterPhotoId); } }

		public TLPageBlockEmbedFlag Flags { get; set; }
		public String Url { get; set; }
		public String Html { get; set; }
		public Int64? PosterPhotoId { get; set; }
		public Int32 W { get; set; }
		public Int32 H { get; set; }
		public TLRichTextBase Caption { get; set; }

		public ITLPageBlockEmbed() { }
		public ITLPageBlockEmbed(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.PageBlockEmbed; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLPageBlockEmbedFlag)from.ReadInt32();
			if (HasUrl) Url = from.ReadString();
			if (HasHtml) Html = from.ReadString();
			if (HasPosterPhotoId) PosterPhotoId = from.ReadInt64();
			W = from.ReadInt32();
			H = from.ReadInt32();
			Caption = TLFactory.Read<TLRichTextBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0xCDE200D1);
			to.Write((Int32)Flags);
			if (HasUrl) to.Write(Url);
			if (HasHtml) to.Write(Html);
			if (HasPosterPhotoId) to.Write(PosterPhotoId.Value);
			to.Write(W);
			to.Write(H);
			to.WriteObject(Caption);
		}

		private void UpdateFlags()
		{
			HasUrl = Url != null;
			HasHtml = Html != null;
			HasPosterPhotoId = PosterPhotoId != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLPageBlockEmbedFlag : Int32
	{
		FullWidth = (1 << 0),
		AllowScrolling = (1 << 3),
		Url = (1 << 1),
		Html = (1 << 2),
		PosterPhotoId = (1 << 4),
	}
#endif

#if !PORTABLE
	[Guid(0x784d446a, 0x4e73, 0x3e67, 0xb1, 0x20, 0xe8, 0xd2, 0xc6, 0xec, 0x8d, 0x4d)]
	public partial interface TLPageBlockEmbed : TLPageBlockBase
	{
		bool IsFullWidth { get; set; }
		bool IsAllowScrolling { get; set; }
		bool HasUrl { get; set; }
		bool HasHtml { get; set; }
		bool HasPosterPhotoId { get; set; }

		TLPageBlockEmbedFlag Flags { get; set; }
		String Url { get; set; }
		String Html { get; set; }
		Int64? PosterPhotoId { get; set; }
		Int32 W { get; set; }
		Int32 H { get; set; }
		TLRichTextBase Caption { get; set; }
	}
#endif

}