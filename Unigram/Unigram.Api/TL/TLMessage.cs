// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessage : ITLMessageCommonBase, TLMessage 
	{
		public override bool IsOut { get { return Flags.HasFlag(TLMessageFlag.Out); } set { Flags = value ? (Flags | TLMessageFlag.Out) : (Flags & ~TLMessageFlag.Out); } }
		public override bool IsMentioned { get { return Flags.HasFlag(TLMessageFlag.Mentioned); } set { Flags = value ? (Flags | TLMessageFlag.Mentioned) : (Flags & ~TLMessageFlag.Mentioned); } }
		public override bool IsMediaUnread { get { return Flags.HasFlag(TLMessageFlag.MediaUnread); } set { Flags = value ? (Flags | TLMessageFlag.MediaUnread) : (Flags & ~TLMessageFlag.MediaUnread); } }
		public override bool IsSilent { get { return Flags.HasFlag(TLMessageFlag.Silent); } set { Flags = value ? (Flags | TLMessageFlag.Silent) : (Flags & ~TLMessageFlag.Silent); } }
		public override bool IsPost { get { return Flags.HasFlag(TLMessageFlag.Post); } set { Flags = value ? (Flags | TLMessageFlag.Post) : (Flags & ~TLMessageFlag.Post); } }
		public bool HasFromId { get { return Flags.HasFlag(TLMessageFlag.FromId); } set { Flags = value ? (Flags | TLMessageFlag.FromId) : (Flags & ~TLMessageFlag.FromId); } }
		public bool HasFwdFrom { get { return Flags.HasFlag(TLMessageFlag.FwdFrom); } set { Flags = value ? (Flags | TLMessageFlag.FwdFrom) : (Flags & ~TLMessageFlag.FwdFrom); } }
		public bool HasViaBotId { get { return Flags.HasFlag(TLMessageFlag.ViaBotId); } set { Flags = value ? (Flags | TLMessageFlag.ViaBotId) : (Flags & ~TLMessageFlag.ViaBotId); } }
		public bool HasReplyToMsgId { get { return Flags.HasFlag(TLMessageFlag.ReplyToMsgId); } set { Flags = value ? (Flags | TLMessageFlag.ReplyToMsgId) : (Flags & ~TLMessageFlag.ReplyToMsgId); } }
		public bool HasMedia { get { return Flags.HasFlag(TLMessageFlag.Media); } set { Flags = value ? (Flags | TLMessageFlag.Media) : (Flags & ~TLMessageFlag.Media); } }
		public bool HasReplyMarkup { get { return Flags.HasFlag(TLMessageFlag.ReplyMarkup); } set { Flags = value ? (Flags | TLMessageFlag.ReplyMarkup) : (Flags & ~TLMessageFlag.ReplyMarkup); } }
		public bool HasEntities { get { return Flags.HasFlag(TLMessageFlag.Entities); } set { Flags = value ? (Flags | TLMessageFlag.Entities) : (Flags & ~TLMessageFlag.Entities); } }
		public bool HasViews { get { return Flags.HasFlag(TLMessageFlag.Views); } set { Flags = value ? (Flags | TLMessageFlag.Views) : (Flags & ~TLMessageFlag.Views); } }
		public bool HasEditDate { get { return Flags.HasFlag(TLMessageFlag.EditDate); } set { Flags = value ? (Flags | TLMessageFlag.EditDate) : (Flags & ~TLMessageFlag.EditDate); } }

		public TLMessageFlag Flags { get; set; }
		public TLMessageFwdHeader FwdFrom { get; set; }
		public Int32? ViaBotId { get; set; }
		public String Message { get; set; }
		public TLMessageMediaBase Media { get; set; }
		public TLReplyMarkupBase ReplyMarkup { get; set; }
		public TLVector<TLMessageEntityBase> Entities { get; set; }
		public Int32? Views { get; set; }
		public Int32? EditDate { get; set; }

		public ITLMessage() { }
		public ITLMessage(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.Message; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessageFlag)from.ReadInt32();
			Id = from.ReadInt32();
			if (HasFromId) FromId = from.ReadInt32();
			ToId = TLFactory.Read<TLPeerBase>(from);
			if (HasFwdFrom) FwdFrom = TLFactory.Read<TLMessageFwdHeader>(from);
			if (HasViaBotId) ViaBotId = from.ReadInt32();
			if (HasReplyToMsgId) ReplyToMsgId = from.ReadInt32();
			Date = from.ReadInt32();
			Message = from.ReadString();
			if (HasMedia) Media = TLFactory.Read<TLMessageMediaBase>(from);
			if (HasReplyMarkup) ReplyMarkup = TLFactory.Read<TLReplyMarkupBase>(from);
			if (HasEntities) Entities = TLFactory.Read<TLVector<TLMessageEntityBase>>(from);
			if (HasViews) Views = from.ReadInt32();
			if (HasEditDate) EditDate = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0xC09BE45F);
			to.Write((Int32)Flags);
			to.Write(Id);
			if (HasFromId) to.Write(FromId.Value);
			to.WriteObject(ToId);
			if (HasFwdFrom) to.WriteObject(FwdFrom);
			if (HasViaBotId) to.Write(ViaBotId.Value);
			if (HasReplyToMsgId) to.Write(ReplyToMsgId.Value);
			to.Write(Date);
			to.Write(Message);
			if (HasMedia) to.WriteObject(Media);
			if (HasReplyMarkup) to.WriteObject(ReplyMarkup);
			if (HasEntities) to.WriteObject(Entities);
			if (HasViews) to.Write(Views.Value);
			if (HasEditDate) to.Write(EditDate.Value);
		}

		private void UpdateFlags()
		{
			HasFromId = FromId != null;
			HasFwdFrom = FwdFrom != null;
			HasViaBotId = ViaBotId != null;
			HasReplyToMsgId = ReplyToMsgId != null;
			HasMedia = Media != null;
			HasReplyMarkup = ReplyMarkup != null;
			HasEntities = Entities != null;
			HasViews = Views != null;
			HasEditDate = EditDate != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessageFlag : Int32
	{
		Out = (1 << 1),
		Mentioned = (1 << 4),
		MediaUnread = (1 << 5),
		Silent = (1 << 13),
		Post = (1 << 14),
		FromId = (1 << 8),
		FwdFrom = (1 << 2),
		ViaBotId = (1 << 11),
		ReplyToMsgId = (1 << 3),
		Media = (1 << 9),
		ReplyMarkup = (1 << 6),
		Entities = (1 << 7),
		Views = (1 << 10),
		EditDate = (1 << 15),
	}
#endif

#if !PORTABLE
	[Guid(0xfbf501df, 0x2941, 0xc23a, 0x4c, 0x21, 0x44, 0x09, 0xfe, 0x3e, 0x26, 0x48)]
	public partial interface TLMessage : TLMessageCommonBase
	{
		bool HasFromId { get; set; }
		bool HasFwdFrom { get; set; }
		bool HasViaBotId { get; set; }
		bool HasReplyToMsgId { get; set; }
		bool HasMedia { get; set; }
		bool HasReplyMarkup { get; set; }
		bool HasEntities { get; set; }
		bool HasViews { get; set; }
		bool HasEditDate { get; set; }

		TLMessageFlag Flags { get; set; }
		Int32 Id { get; set; }
		Int32? FromId { get; set; }
		TLPeerBase ToId { get; set; }
		TLMessageFwdHeader FwdFrom { get; set; }
		Int32? ViaBotId { get; set; }
		Int32? ReplyToMsgId { get; set; }
		Int32 Date { get; set; }
		String Message { get; set; }
		TLMessageMediaBase Media { get; set; }
		TLReplyMarkupBase ReplyMarkup { get; set; }
		TLVector<TLMessageEntityBase> Entities { get; set; }
		Int32? Views { get; set; }
		Int32? EditDate { get; set; }
	}
#endif

}