// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLUpdateBotPrecheckoutQuery : ITLUpdateBase, TLUpdateBotPrecheckoutQuery 
	{
		public bool HasInfo { get { return Flags.HasFlag(TLUpdateBotPrecheckoutQueryFlag.Info); } set { Flags = value ? (Flags | TLUpdateBotPrecheckoutQueryFlag.Info) : (Flags & ~TLUpdateBotPrecheckoutQueryFlag.Info); } }
		public bool HasShippingOptionId { get { return Flags.HasFlag(TLUpdateBotPrecheckoutQueryFlag.ShippingOptionId); } set { Flags = value ? (Flags | TLUpdateBotPrecheckoutQueryFlag.ShippingOptionId) : (Flags & ~TLUpdateBotPrecheckoutQueryFlag.ShippingOptionId); } }

		public TLUpdateBotPrecheckoutQueryFlag Flags { get; set; }
		public Int64 QueryId { get; set; }
		public Int32 UserId { get; set; }
		public Byte[] Payload { get; set; }
		public TLPaymentRequestedInfo Info { get; set; }
		public String ShippingOptionId { get; set; }
		public String Currency { get; set; }
		public Int64 TotalAmount { get; set; }

		public ITLUpdateBotPrecheckoutQuery() { }
		public ITLUpdateBotPrecheckoutQuery(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.UpdateBotPrecheckoutQuery; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLUpdateBotPrecheckoutQueryFlag)from.ReadInt32();
			QueryId = from.ReadInt64();
			UserId = from.ReadInt32();
			Payload = from.ReadByteArray();
			if (HasInfo) Info = TLFactory.Read<TLPaymentRequestedInfo>(from);
			if (HasShippingOptionId) ShippingOptionId = from.ReadString();
			Currency = from.ReadString();
			TotalAmount = from.ReadInt64();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x5D2F3AA9);
			to.Write((Int32)Flags);
			to.Write(QueryId);
			to.Write(UserId);
			to.WriteByteArray(Payload);
			if (HasInfo) to.WriteObject(Info);
			if (HasShippingOptionId) to.Write(ShippingOptionId);
			to.Write(Currency);
			to.Write(TotalAmount);
		}

		private void UpdateFlags()
		{
			HasInfo = Info != null;
			HasShippingOptionId = ShippingOptionId != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLUpdateBotPrecheckoutQueryFlag : Int32
	{
		Info = (1 << 0),
		ShippingOptionId = (1 << 1),
	}
#endif

#if !PORTABLE
	[Guid(0x8340c33a, 0x292f, 0x15c1, 0x38, 0xfb, 0xe2, 0xd6, 0xf7, 0x5e, 0x8b, 0xcc)]
	public partial interface TLUpdateBotPrecheckoutQuery : TLUpdateBase
	{
		bool HasInfo { get; set; }
		bool HasShippingOptionId { get; set; }

		TLUpdateBotPrecheckoutQueryFlag Flags { get; set; }
		Int64 QueryId { get; set; }
		Int32 UserId { get; set; }
		Byte[] Payload { get; set; }
		TLPaymentRequestedInfo Info { get; set; }
		String ShippingOptionId { get; set; }
		String Currency { get; set; }
		Int64 TotalAmount { get; set; }
	}
#endif

}