// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLPageBlockVideo : ITLPageBlockBase, TLPageBlockVideo 
	{
		public bool IsAutoplay { get { return Flags.HasFlag(TLPageBlockVideoFlag.Autoplay); } set { Flags = value ? (Flags | TLPageBlockVideoFlag.Autoplay) : (Flags & ~TLPageBlockVideoFlag.Autoplay); } }
		public bool IsLoop { get { return Flags.HasFlag(TLPageBlockVideoFlag.Loop); } set { Flags = value ? (Flags | TLPageBlockVideoFlag.Loop) : (Flags & ~TLPageBlockVideoFlag.Loop); } }

		public TLPageBlockVideoFlag Flags { get; set; }
		public Int64 VideoId { get; set; }
		public TLRichTextBase Caption { get; set; }

		public ITLPageBlockVideo() { }
		public ITLPageBlockVideo(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.PageBlockVideo; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLPageBlockVideoFlag)from.ReadInt32();
			VideoId = from.ReadInt64();
			Caption = TLFactory.Read<TLRichTextBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xD9D71866);
			to.Write((Int32)Flags);
			to.Write(VideoId);
			to.WriteObject(Caption);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLPageBlockVideoFlag : Int32
	{
		Autoplay = (1 << 0),
		Loop = (1 << 1),
	}
#endif

#if !PORTABLE
	[Guid(0x784d446a, 0x4e73, 0x3e67, 0xb1, 0x20, 0xe8, 0xd2, 0xc6, 0xec, 0x8d, 0x4d)]
	public partial interface TLPageBlockVideo : TLPageBlockBase
	{
		bool IsAutoplay { get; set; }
		bool IsLoop { get; set; }

		TLPageBlockVideoFlag Flags { get; set; }
		Int64 VideoId { get; set; }
		TLRichTextBase Caption { get; set; }
	}
#endif

}