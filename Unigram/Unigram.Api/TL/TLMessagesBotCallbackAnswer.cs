// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessagesBotCallbackAnswer : ITLObject, TLMessagesBotCallbackAnswer 
	{
		public bool IsAlert { get { return Flags.HasFlag(TLMessagesBotCallbackAnswerFlag.Alert); } set { Flags = value ? (Flags | TLMessagesBotCallbackAnswerFlag.Alert) : (Flags & ~TLMessagesBotCallbackAnswerFlag.Alert); } }
		public bool IsHasUrl { get { return Flags.HasFlag(TLMessagesBotCallbackAnswerFlag.HasUrl); } set { Flags = value ? (Flags | TLMessagesBotCallbackAnswerFlag.HasUrl) : (Flags & ~TLMessagesBotCallbackAnswerFlag.HasUrl); } }
		public bool HasMessage { get { return Flags.HasFlag(TLMessagesBotCallbackAnswerFlag.Message); } set { Flags = value ? (Flags | TLMessagesBotCallbackAnswerFlag.Message) : (Flags & ~TLMessagesBotCallbackAnswerFlag.Message); } }
		public bool HasUrl { get { return Flags.HasFlag(TLMessagesBotCallbackAnswerFlag.Url); } set { Flags = value ? (Flags | TLMessagesBotCallbackAnswerFlag.Url) : (Flags & ~TLMessagesBotCallbackAnswerFlag.Url); } }

		public TLMessagesBotCallbackAnswerFlag Flags { get; set; }
		public String Message { get; set; }
		public String Url { get; set; }
		public Int32 CacheTime { get; set; }

		public ITLMessagesBotCallbackAnswer() { }
		public ITLMessagesBotCallbackAnswer(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessagesBotCallbackAnswer; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessagesBotCallbackAnswerFlag)from.ReadInt32();
			if (HasMessage) Message = from.ReadString();
			if (HasUrl) Url = from.ReadString();
			CacheTime = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x36585EA4);
			to.Write((Int32)Flags);
			if (HasMessage) to.Write(Message);
			if (HasUrl) to.Write(Url);
			to.Write(CacheTime);
		}

		private void UpdateFlags()
		{
			HasMessage = Message != null;
			HasUrl = Url != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessagesBotCallbackAnswerFlag : Int32
	{
		Alert = (1 << 1),
		HasUrl = (1 << 3),
		Message = (1 << 0),
		Url = (1 << 2),
	}
#endif

#if !PORTABLE
	[Guid(0x70a08cb0, 0x4cf1, 0x3836, 0x86, 0x44, 0xe0, 0xf7, 0xb9, 0xb8, 0x88, 0x02)]
	public partial interface TLMessagesBotCallbackAnswer : TLObject
	{
		bool IsAlert { get; set; }
		bool IsHasUrl { get; set; }
		bool HasMessage { get; set; }
		bool HasUrl { get; set; }

		TLMessagesBotCallbackAnswerFlag Flags { get; set; }
		String Message { get; set; }
		String Url { get; set; }
		Int32 CacheTime { get; set; }
	}
#endif

}