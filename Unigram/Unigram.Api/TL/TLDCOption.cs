// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLDCOption : ITLObject, TLDCOption 
	{
		public bool IsIpv6 { get { return Flags.HasFlag(TLDCOptionFlag.Ipv6); } set { Flags = value ? (Flags | TLDCOptionFlag.Ipv6) : (Flags & ~TLDCOptionFlag.Ipv6); } }
		public bool IsMediaOnly { get { return Flags.HasFlag(TLDCOptionFlag.MediaOnly); } set { Flags = value ? (Flags | TLDCOptionFlag.MediaOnly) : (Flags & ~TLDCOptionFlag.MediaOnly); } }
		public bool IsTcpoOnly { get { return Flags.HasFlag(TLDCOptionFlag.TcpoOnly); } set { Flags = value ? (Flags | TLDCOptionFlag.TcpoOnly) : (Flags & ~TLDCOptionFlag.TcpoOnly); } }

		public TLDCOptionFlag Flags { get; set; }
		public Int32 Id { get; set; }
		public String IpAddress { get; set; }
		public Int32 Port { get; set; }

		public ITLDCOption() { }
		public ITLDCOption(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.DCOption; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLDCOptionFlag)from.ReadInt32();
			Id = from.ReadInt32();
			IpAddress = from.ReadString();
			Port = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x5D8C6CC);
			to.Write((Int32)Flags);
			to.Write(Id);
			to.Write(IpAddress);
			to.Write(Port);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLDCOptionFlag : Int32
	{
		Ipv6 = (1 << 0),
		MediaOnly = (1 << 1),
		TcpoOnly = (1 << 2),
	}
#endif

#if !PORTABLE
	[Guid(0x6737e909, 0xbdf9, 0xe8be, 0x35, 0x28, 0x6b, 0x7c, 0xea, 0x2f, 0x8d, 0x6d)]
	public partial interface TLDCOption : TLObject
	{
		bool IsIpv6 { get; set; }
		bool IsMediaOnly { get; set; }
		bool IsTcpoOnly { get; set; }

		TLDCOptionFlag Flags { get; set; }
		Int32 Id { get; set; }
		String IpAddress { get; set; }
		Int32 Port { get; set; }
	}
#endif

}