// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLPaymentsPaymentForm : ITLObject, TLPaymentsPaymentForm 
	{
		public bool IsCanSaveCredentials { get { return Flags.HasFlag(TLPaymentsPaymentFormFlag.CanSaveCredentials); } set { Flags = value ? (Flags | TLPaymentsPaymentFormFlag.CanSaveCredentials) : (Flags & ~TLPaymentsPaymentFormFlag.CanSaveCredentials); } }
		public bool IsPasswordMissing { get { return Flags.HasFlag(TLPaymentsPaymentFormFlag.PasswordMissing); } set { Flags = value ? (Flags | TLPaymentsPaymentFormFlag.PasswordMissing) : (Flags & ~TLPaymentsPaymentFormFlag.PasswordMissing); } }
		public bool HasNativeProvider { get { return Flags.HasFlag(TLPaymentsPaymentFormFlag.NativeProvider); } set { Flags = value ? (Flags | TLPaymentsPaymentFormFlag.NativeProvider) : (Flags & ~TLPaymentsPaymentFormFlag.NativeProvider); } }
		public bool HasNativeParams { get { return Flags.HasFlag(TLPaymentsPaymentFormFlag.NativeParams); } set { Flags = value ? (Flags | TLPaymentsPaymentFormFlag.NativeParams) : (Flags & ~TLPaymentsPaymentFormFlag.NativeParams); } }
		public bool HasSavedInfo { get { return Flags.HasFlag(TLPaymentsPaymentFormFlag.SavedInfo); } set { Flags = value ? (Flags | TLPaymentsPaymentFormFlag.SavedInfo) : (Flags & ~TLPaymentsPaymentFormFlag.SavedInfo); } }
		public bool HasSavedCredentials { get { return Flags.HasFlag(TLPaymentsPaymentFormFlag.SavedCredentials); } set { Flags = value ? (Flags | TLPaymentsPaymentFormFlag.SavedCredentials) : (Flags & ~TLPaymentsPaymentFormFlag.SavedCredentials); } }

		public TLPaymentsPaymentFormFlag Flags { get; set; }
		public Int32 BotId { get; set; }
		public TLInvoice Invoice { get; set; }
		public Int32 ProviderId { get; set; }
		public String Url { get; set; }
		public String NativeProvider { get; set; }
		public TLDataJSON NativeParams { get; set; }
		public TLPaymentRequestedInfo SavedInfo { get; set; }
		public TLPaymentSavedCredentialsBase SavedCredentials { get; set; }
		public TLVector<TLUserBase> Users { get; set; }

		public ITLPaymentsPaymentForm() { }
		public ITLPaymentsPaymentForm(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.PaymentsPaymentForm; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLPaymentsPaymentFormFlag)from.ReadInt32();
			BotId = from.ReadInt32();
			Invoice = TLFactory.Read<TLInvoice>(from);
			ProviderId = from.ReadInt32();
			Url = from.ReadString();
			if (HasNativeProvider) NativeProvider = from.ReadString();
			if (HasNativeParams) NativeParams = TLFactory.Read<TLDataJSON>(from);
			if (HasSavedInfo) SavedInfo = TLFactory.Read<TLPaymentRequestedInfo>(from);
			if (HasSavedCredentials) SavedCredentials = TLFactory.Read<TLPaymentSavedCredentialsBase>(from);
			Users = TLFactory.Read<TLVector<TLUserBase>>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x3F56AEA3);
			to.Write((Int32)Flags);
			to.Write(BotId);
			to.WriteObject(Invoice);
			to.Write(ProviderId);
			to.Write(Url);
			if (HasNativeProvider) to.Write(NativeProvider);
			if (HasNativeParams) to.WriteObject(NativeParams);
			if (HasSavedInfo) to.WriteObject(SavedInfo);
			if (HasSavedCredentials) to.WriteObject(SavedCredentials);
			to.WriteObject(Users);
		}

		private void UpdateFlags()
		{
			HasNativeProvider = NativeProvider != null;
			HasNativeParams = NativeParams != null;
			HasSavedInfo = SavedInfo != null;
			HasSavedCredentials = SavedCredentials != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLPaymentsPaymentFormFlag : Int32
	{
		CanSaveCredentials = (1 << 2),
		PasswordMissing = (1 << 3),
		NativeProvider = (1 << 4),
		NativeParams = (1 << 4),
		SavedInfo = (1 << 0),
		SavedCredentials = (1 << 1),
	}
#endif

#if !PORTABLE
	[Guid(0xddee237f, 0x0d9f, 0x5801, 0x82, 0xa5, 0xc2, 0x64, 0x41, 0xd5, 0xfd, 0x14)]
	public partial interface TLPaymentsPaymentForm : TLObject
	{
		bool IsCanSaveCredentials { get; set; }
		bool IsPasswordMissing { get; set; }
		bool HasNativeProvider { get; set; }
		bool HasNativeParams { get; set; }
		bool HasSavedInfo { get; set; }
		bool HasSavedCredentials { get; set; }

		TLPaymentsPaymentFormFlag Flags { get; set; }
		Int32 BotId { get; set; }
		TLInvoice Invoice { get; set; }
		Int32 ProviderId { get; set; }
		String Url { get; set; }
		String NativeProvider { get; set; }
		TLDataJSON NativeParams { get; set; }
		TLPaymentRequestedInfo SavedInfo { get; set; }
		TLPaymentSavedCredentialsBase SavedCredentials { get; set; }
		TLVector<TLUserBase> Users { get; set; }
	}
#endif

}