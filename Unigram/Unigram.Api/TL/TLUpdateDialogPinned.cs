// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLUpdateDialogPinned : ITLUpdateBase, TLUpdateDialogPinned 
	{
		public bool IsPinned { get { return Flags.HasFlag(TLUpdateDialogPinnedFlag.Pinned); } set { Flags = value ? (Flags | TLUpdateDialogPinnedFlag.Pinned) : (Flags & ~TLUpdateDialogPinnedFlag.Pinned); } }

		public TLUpdateDialogPinnedFlag Flags { get; set; }
		public TLPeerBase Peer { get; set; }

		public ITLUpdateDialogPinned() { }
		public ITLUpdateDialogPinned(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.UpdateDialogPinned; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLUpdateDialogPinnedFlag)from.ReadInt32();
			Peer = TLFactory.Read<TLPeerBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xD711A2CC);
			to.Write((Int32)Flags);
			to.WriteObject(Peer);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLUpdateDialogPinnedFlag : Int32
	{
		Pinned = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0x8340c33a, 0x292f, 0x15c1, 0x38, 0xfb, 0xe2, 0xd6, 0xf7, 0x5e, 0x8b, 0xcc)]
	public partial interface TLUpdateDialogPinned : TLUpdateBase
	{
		bool IsPinned { get; set; }

		TLUpdateDialogPinnedFlag Flags { get; set; }
		TLPeerBase Peer { get; set; }
	}
#endif

}