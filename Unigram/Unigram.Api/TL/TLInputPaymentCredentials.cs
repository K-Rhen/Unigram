// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLInputPaymentCredentials : ITLInputPaymentCredentialsBase, TLInputPaymentCredentials 
	{
		public bool IsSave { get { return Flags.HasFlag(TLInputPaymentCredentialsFlag.Save); } set { Flags = value ? (Flags | TLInputPaymentCredentialsFlag.Save) : (Flags & ~TLInputPaymentCredentialsFlag.Save); } }

		public TLInputPaymentCredentialsFlag Flags { get; set; }
		public TLDataJSON Data { get; set; }

		public ITLInputPaymentCredentials() { }
		public ITLInputPaymentCredentials(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.InputPaymentCredentials; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLInputPaymentCredentialsFlag)from.ReadInt32();
			Data = TLFactory.Read<TLDataJSON>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x3417D728);
			to.Write((Int32)Flags);
			to.WriteObject(Data);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLInputPaymentCredentialsFlag : Int32
	{
		Save = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0x559af88d, 0xd7a2, 0x8d93, 0xe4, 0x02, 0x16, 0xee, 0x38, 0xe2, 0xb1, 0x94)]
	public partial interface TLInputPaymentCredentials : TLInputPaymentCredentialsBase
	{
		bool IsSave { get; set; }

		TLInputPaymentCredentialsFlag Flags { get; set; }
		TLDataJSON Data { get; set; }
	}
#endif

}