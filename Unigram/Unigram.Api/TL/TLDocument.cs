// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLDocument : ITLDocumentBase, TLDocument 
	{
		public Int64 AccessHash { get; set; }
		public Int32 Date { get; set; }
		public String MimeType { get; set; }
		public Int32 Size { get; set; }
		public TLPhotoSizeBase Thumb { get; set; }
		public Int32 DCId { get; set; }
		public Int32 Version { get; set; }
		public TLVector<TLDocumentAttributeBase> Attributes { get; set; }

		public ITLDocument() { }
		public ITLDocument(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.Document; } }

		public override void Read(TLBinaryReader from)
		{
			Id = from.ReadInt64();
			AccessHash = from.ReadInt64();
			Date = from.ReadInt32();
			MimeType = from.ReadString();
			Size = from.ReadInt32();
			Thumb = TLFactory.Read<TLPhotoSizeBase>(from);
			DCId = from.ReadInt32();
			Version = from.ReadInt32();
			Attributes = TLFactory.Read<TLVector<TLDocumentAttributeBase>>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x87232BC7);
			to.Write(Id);
			to.Write(AccessHash);
			to.Write(Date);
			to.Write(MimeType);
			to.Write(Size);
			to.WriteObject(Thumb);
			to.Write(DCId);
			to.Write(Version);
			to.WriteObject(Attributes);
		}
	}

#if !PORTABLE
	[Guid(0xefbdc3fd, 0x9cb7, 0x8eec, 0xb8, 0x21, 0x1d, 0x24, 0x99, 0xe0, 0x47, 0x04)]
	public partial interface TLDocument : TLDocumentBase
	{
		Int64 Id { get; set; }
		Int64 AccessHash { get; set; }
		Int32 Date { get; set; }
		String MimeType { get; set; }
		Int32 Size { get; set; }
		TLPhotoSizeBase Thumb { get; set; }
		Int32 DCId { get; set; }
		Int32 Version { get; set; }
		TLVector<TLDocumentAttributeBase> Attributes { get; set; }
	}
#endif

}