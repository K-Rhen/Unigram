// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLAuthSentCode : ITLObject, TLAuthSentCode 
	{
		public bool IsPhoneRegistered { get { return Flags.HasFlag(TLAuthSentCodeFlag.PhoneRegistered); } set { Flags = value ? (Flags | TLAuthSentCodeFlag.PhoneRegistered) : (Flags & ~TLAuthSentCodeFlag.PhoneRegistered); } }
		public bool HasNextType { get { return Flags.HasFlag(TLAuthSentCodeFlag.NextType); } set { Flags = value ? (Flags | TLAuthSentCodeFlag.NextType) : (Flags & ~TLAuthSentCodeFlag.NextType); } }
		public bool HasTimeout { get { return Flags.HasFlag(TLAuthSentCodeFlag.Timeout); } set { Flags = value ? (Flags | TLAuthSentCodeFlag.Timeout) : (Flags & ~TLAuthSentCodeFlag.Timeout); } }

		public TLAuthSentCodeFlag Flags { get; set; }
		public TLAuthSentCodeTypeBase Type { get; set; }
		public String PhoneCodeHash { get; set; }
		public TLAuthCodeTypeBase NextType { get; set; }
		public Int32? Timeout { get; set; }

		public ITLAuthSentCode() { }
		public ITLAuthSentCode(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.AuthSentCode; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLAuthSentCodeFlag)from.ReadInt32();
			Type = TLFactory.Read<TLAuthSentCodeTypeBase>(from);
			PhoneCodeHash = from.ReadString();
			if (HasNextType) NextType = TLFactory.Read<TLAuthCodeTypeBase>(from);
			if (HasTimeout) Timeout = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x5E002502);
			to.Write((Int32)Flags);
			to.WriteObject(Type);
			to.Write(PhoneCodeHash);
			if (HasNextType) to.WriteObject(NextType);
			if (HasTimeout) to.Write(Timeout.Value);
		}

		private void UpdateFlags()
		{
			HasNextType = NextType != null;
			HasTimeout = Timeout != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLAuthSentCodeFlag : Int32
	{
		PhoneRegistered = (1 << 0),
		NextType = (1 << 1),
		Timeout = (1 << 2),
	}
#endif

#if !PORTABLE
	[Guid(0xacc4b0bb, 0xd58d, 0x5f6f, 0xa8, 0xa5, 0xc0, 0x5f, 0x34, 0x96, 0x5d, 0x55)]
	public partial interface TLAuthSentCode : TLObject
	{
		bool IsPhoneRegistered { get; set; }
		bool HasNextType { get; set; }
		bool HasTimeout { get; set; }

		TLAuthSentCodeFlag Flags { get; set; }
		TLAuthSentCodeTypeBase Type { get; set; }
		String PhoneCodeHash { get; set; }
		TLAuthCodeTypeBase NextType { get; set; }
		Int32? Timeout { get; set; }
	}
#endif

}