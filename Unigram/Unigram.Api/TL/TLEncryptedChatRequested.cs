// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLEncryptedChatRequested : ITLEncryptedChatBase, TLEncryptedChatRequested 
	{
		public Int64 AccessHash { get; set; }
		public Int32 Date { get; set; }
		public Int32 AdminId { get; set; }
		public Int32 ParticipantId { get; set; }
		public Byte[] GA { get; set; }

		public ITLEncryptedChatRequested() { }
		public ITLEncryptedChatRequested(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.EncryptedChatRequested; } }

		public override void Read(TLBinaryReader from)
		{
			Id = from.ReadInt32();
			AccessHash = from.ReadInt64();
			Date = from.ReadInt32();
			AdminId = from.ReadInt32();
			ParticipantId = from.ReadInt32();
			GA = from.ReadByteArray();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xC878527E);
			to.Write(Id);
			to.Write(AccessHash);
			to.Write(Date);
			to.Write(AdminId);
			to.Write(ParticipantId);
			to.WriteByteArray(GA);
		}
	}

#if !PORTABLE
	[Guid(0xa0e8d796, 0x017e, 0xa6c4, 0x86, 0x9a, 0x55, 0x64, 0xec, 0xf4, 0xac, 0x7f)]
	public partial interface TLEncryptedChatRequested : TLEncryptedChatBase
	{
		Int32 Id { get; set; }
		Int64 AccessHash { get; set; }
		Int32 Date { get; set; }
		Int32 AdminId { get; set; }
		Int32 ParticipantId { get; set; }
		Byte[] GA { get; set; }
	}
#endif

}