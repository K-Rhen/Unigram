// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLUpdatesDifferenceSlice : ITLUpdatesDifferenceBase, TLUpdatesDifferenceSlice 
	{
		public TLVector<TLMessageBase> NewMessages { get; set; }
		public TLVector<TLEncryptedMessageBase> NewEncryptedMessages { get; set; }
		public TLVector<TLUpdateBase> OtherUpdates { get; set; }
		public TLVector<TLChatBase> Chats { get; set; }
		public TLVector<TLUserBase> Users { get; set; }
		public TLUpdatesState IntermediateState { get; set; }

		public ITLUpdatesDifferenceSlice() { }
		public ITLUpdatesDifferenceSlice(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.UpdatesDifferenceSlice; } }

		public override void Read(TLBinaryReader from)
		{
			NewMessages = TLFactory.Read<TLVector<TLMessageBase>>(from);
			NewEncryptedMessages = TLFactory.Read<TLVector<TLEncryptedMessageBase>>(from);
			OtherUpdates = TLFactory.Read<TLVector<TLUpdateBase>>(from);
			Chats = TLFactory.Read<TLVector<TLChatBase>>(from);
			Users = TLFactory.Read<TLVector<TLUserBase>>(from);
			IntermediateState = TLFactory.Read<TLUpdatesState>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xA8FB1981);
			to.WriteObject(NewMessages);
			to.WriteObject(NewEncryptedMessages);
			to.WriteObject(OtherUpdates);
			to.WriteObject(Chats);
			to.WriteObject(Users);
			to.WriteObject(IntermediateState);
		}
	}

#if !PORTABLE
	[Guid(0x7c8c2e4d, 0x8e8e, 0x99b6, 0x1d, 0x70, 0xe7, 0xfa, 0x4c, 0x7e, 0x35, 0xb8)]
	public partial interface TLUpdatesDifferenceSlice : TLUpdatesDifferenceBase
	{
		TLVector<TLMessageBase> NewMessages { get; set; }
		TLVector<TLEncryptedMessageBase> NewEncryptedMessages { get; set; }
		TLVector<TLUpdateBase> OtherUpdates { get; set; }
		TLVector<TLChatBase> Chats { get; set; }
		TLVector<TLUserBase> Users { get; set; }
		TLUpdatesState IntermediateState { get; set; }
	}
#endif

}