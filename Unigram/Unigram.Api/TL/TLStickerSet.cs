// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLStickerSet : ITLObject, TLStickerSet 
	{
		public bool IsInstalled { get { return Flags.HasFlag(TLStickerSetFlag.Installed); } set { Flags = value ? (Flags | TLStickerSetFlag.Installed) : (Flags & ~TLStickerSetFlag.Installed); } }
		public bool IsArchived { get { return Flags.HasFlag(TLStickerSetFlag.Archived); } set { Flags = value ? (Flags | TLStickerSetFlag.Archived) : (Flags & ~TLStickerSetFlag.Archived); } }
		public bool IsOfficial { get { return Flags.HasFlag(TLStickerSetFlag.Official); } set { Flags = value ? (Flags | TLStickerSetFlag.Official) : (Flags & ~TLStickerSetFlag.Official); } }
		public bool IsMasks { get { return Flags.HasFlag(TLStickerSetFlag.Masks); } set { Flags = value ? (Flags | TLStickerSetFlag.Masks) : (Flags & ~TLStickerSetFlag.Masks); } }

		public TLStickerSetFlag Flags { get; set; }
		public Int64 Id { get; set; }
		public Int64 AccessHash { get; set; }
		public String Title { get; set; }
		public String ShortName { get; set; }
		public Int32 Count { get; set; }
		public Int32 Hash { get; set; }

		public ITLStickerSet() { }
		public ITLStickerSet(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.StickerSet; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLStickerSetFlag)from.ReadInt32();
			Id = from.ReadInt64();
			AccessHash = from.ReadInt64();
			Title = from.ReadString();
			ShortName = from.ReadString();
			Count = from.ReadInt32();
			Hash = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xCD303B41);
			to.Write((Int32)Flags);
			to.Write(Id);
			to.Write(AccessHash);
			to.Write(Title);
			to.Write(ShortName);
			to.Write(Count);
			to.Write(Hash);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLStickerSetFlag : Int32
	{
		Installed = (1 << 0),
		Archived = (1 << 1),
		Official = (1 << 2),
		Masks = (1 << 3),
	}
#endif

#if !PORTABLE
	[Guid(0x6f664a77, 0x47b3, 0xfcdf, 0x7d, 0x03, 0xaa, 0x5d, 0x50, 0xa9, 0xb4, 0x62)]
	public partial interface TLStickerSet : TLObject
	{
		bool IsInstalled { get; set; }
		bool IsArchived { get; set; }
		bool IsOfficial { get; set; }
		bool IsMasks { get; set; }

		TLStickerSetFlag Flags { get; set; }
		Int64 Id { get; set; }
		Int64 AccessHash { get; set; }
		String Title { get; set; }
		String ShortName { get; set; }
		Int32 Count { get; set; }
		Int32 Hash { get; set; }
	}
#endif

}