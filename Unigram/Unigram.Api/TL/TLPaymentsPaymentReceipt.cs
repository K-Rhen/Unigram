// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLPaymentsPaymentReceipt : ITLObject, TLPaymentsPaymentReceipt 
	{
		public bool HasInfo { get { return Flags.HasFlag(TLPaymentsPaymentReceiptFlag.Info); } set { Flags = value ? (Flags | TLPaymentsPaymentReceiptFlag.Info) : (Flags & ~TLPaymentsPaymentReceiptFlag.Info); } }
		public bool HasShipping { get { return Flags.HasFlag(TLPaymentsPaymentReceiptFlag.Shipping); } set { Flags = value ? (Flags | TLPaymentsPaymentReceiptFlag.Shipping) : (Flags & ~TLPaymentsPaymentReceiptFlag.Shipping); } }

		public TLPaymentsPaymentReceiptFlag Flags { get; set; }
		public Int32 Date { get; set; }
		public Int32 BotId { get; set; }
		public TLInvoice Invoice { get; set; }
		public Int32 ProviderId { get; set; }
		public TLPaymentRequestedInfo Info { get; set; }
		public TLShippingOption Shipping { get; set; }
		public String Currency { get; set; }
		public Int64 TotalAmount { get; set; }
		public String CredentialsTitle { get; set; }
		public TLVector<TLUserBase> Users { get; set; }

		public ITLPaymentsPaymentReceipt() { }
		public ITLPaymentsPaymentReceipt(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.PaymentsPaymentReceipt; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLPaymentsPaymentReceiptFlag)from.ReadInt32();
			Date = from.ReadInt32();
			BotId = from.ReadInt32();
			Invoice = TLFactory.Read<TLInvoice>(from);
			ProviderId = from.ReadInt32();
			if (HasInfo) Info = TLFactory.Read<TLPaymentRequestedInfo>(from);
			if (HasShipping) Shipping = TLFactory.Read<TLShippingOption>(from);
			Currency = from.ReadString();
			TotalAmount = from.ReadInt64();
			CredentialsTitle = from.ReadString();
			Users = TLFactory.Read<TLVector<TLUserBase>>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x500911E1);
			to.Write((Int32)Flags);
			to.Write(Date);
			to.Write(BotId);
			to.WriteObject(Invoice);
			to.Write(ProviderId);
			if (HasInfo) to.WriteObject(Info);
			if (HasShipping) to.WriteObject(Shipping);
			to.Write(Currency);
			to.Write(TotalAmount);
			to.Write(CredentialsTitle);
			to.WriteObject(Users);
		}

		private void UpdateFlags()
		{
			HasInfo = Info != null;
			HasShipping = Shipping != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLPaymentsPaymentReceiptFlag : Int32
	{
		Info = (1 << 0),
		Shipping = (1 << 1),
	}
#endif

#if !PORTABLE
	[Guid(0xb8511f34, 0x5c20, 0x7dc5, 0x31, 0x4f, 0x21, 0x71, 0xff, 0x65, 0xa3, 0x0f)]
	public partial interface TLPaymentsPaymentReceipt : TLObject
	{
		bool HasInfo { get; set; }
		bool HasShipping { get; set; }

		TLPaymentsPaymentReceiptFlag Flags { get; set; }
		Int32 Date { get; set; }
		Int32 BotId { get; set; }
		TLInvoice Invoice { get; set; }
		Int32 ProviderId { get; set; }
		TLPaymentRequestedInfo Info { get; set; }
		TLShippingOption Shipping { get; set; }
		String Currency { get; set; }
		Int64 TotalAmount { get; set; }
		String CredentialsTitle { get; set; }
		TLVector<TLUserBase> Users { get; set; }
	}
#endif

}