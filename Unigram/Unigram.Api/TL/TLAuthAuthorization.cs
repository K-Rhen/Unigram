// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLAuthAuthorization : ITLObject, TLAuthAuthorization 
	{
		public bool HasTmpSessions { get { return Flags.HasFlag(TLAuthAuthorizationFlag.TmpSessions); } set { Flags = value ? (Flags | TLAuthAuthorizationFlag.TmpSessions) : (Flags & ~TLAuthAuthorizationFlag.TmpSessions); } }

		public TLAuthAuthorizationFlag Flags { get; set; }
		public Int32? TmpSessions { get; set; }
		public TLUserBase User { get; set; }

		public ITLAuthAuthorization() { }
		public ITLAuthAuthorization(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.AuthAuthorization; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLAuthAuthorizationFlag)from.ReadInt32();
			if (HasTmpSessions) TmpSessions = from.ReadInt32();
			User = TLFactory.Read<TLUserBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0xCD050916);
			to.Write((Int32)Flags);
			if (HasTmpSessions) to.Write(TmpSessions.Value);
			to.WriteObject(User);
		}

		private void UpdateFlags()
		{
			HasTmpSessions = TmpSessions != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLAuthAuthorizationFlag : Int32
	{
		TmpSessions = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0x6798571d, 0xf859, 0x4598, 0xde, 0x4d, 0x0b, 0xba, 0xee, 0xd9, 0x3b, 0x85)]
	public partial interface TLAuthAuthorization : TLObject
	{
		bool HasTmpSessions { get; set; }

		TLAuthAuthorizationFlag Flags { get; set; }
		Int32? TmpSessions { get; set; }
		TLUserBase User { get; set; }
	}
#endif

}