// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessageMediaInvoice : ITLMessageMediaBase, TLMessageMediaInvoice 
	{
		public bool IsShippingAddressRequested { get { return Flags.HasFlag(TLMessageMediaInvoiceFlag.ShippingAddressRequested); } set { Flags = value ? (Flags | TLMessageMediaInvoiceFlag.ShippingAddressRequested) : (Flags & ~TLMessageMediaInvoiceFlag.ShippingAddressRequested); } }
		public bool IsTest { get { return Flags.HasFlag(TLMessageMediaInvoiceFlag.Test); } set { Flags = value ? (Flags | TLMessageMediaInvoiceFlag.Test) : (Flags & ~TLMessageMediaInvoiceFlag.Test); } }
		public bool HasPhoto { get { return Flags.HasFlag(TLMessageMediaInvoiceFlag.Photo); } set { Flags = value ? (Flags | TLMessageMediaInvoiceFlag.Photo) : (Flags & ~TLMessageMediaInvoiceFlag.Photo); } }
		public bool HasReceiptMsgId { get { return Flags.HasFlag(TLMessageMediaInvoiceFlag.ReceiptMsgId); } set { Flags = value ? (Flags | TLMessageMediaInvoiceFlag.ReceiptMsgId) : (Flags & ~TLMessageMediaInvoiceFlag.ReceiptMsgId); } }

		public TLMessageMediaInvoiceFlag Flags { get; set; }
		public String Title { get; set; }
		public String Description { get; set; }
		public TLWebDocument Photo { get; set; }
		public Int32? ReceiptMsgId { get; set; }
		public String Currency { get; set; }
		public Int64 TotalAmount { get; set; }
		public String StartParam { get; set; }

		public ITLMessageMediaInvoice() { }
		public ITLMessageMediaInvoice(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessageMediaInvoice; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessageMediaInvoiceFlag)from.ReadInt32();
			Title = from.ReadString();
			Description = from.ReadString();
			if (HasPhoto) Photo = TLFactory.Read<TLWebDocument>(from);
			if (HasReceiptMsgId) ReceiptMsgId = from.ReadInt32();
			Currency = from.ReadString();
			TotalAmount = from.ReadInt64();
			StartParam = from.ReadString();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x84551347);
			to.Write((Int32)Flags);
			to.Write(Title);
			to.Write(Description);
			if (HasPhoto) to.WriteObject(Photo);
			if (HasReceiptMsgId) to.Write(ReceiptMsgId.Value);
			to.Write(Currency);
			to.Write(TotalAmount);
			to.Write(StartParam);
		}

		private void UpdateFlags()
		{
			HasPhoto = Photo != null;
			HasReceiptMsgId = ReceiptMsgId != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessageMediaInvoiceFlag : Int32
	{
		ShippingAddressRequested = (1 << 1),
		Test = (1 << 3),
		Photo = (1 << 0),
		ReceiptMsgId = (1 << 2),
	}
#endif

#if !PORTABLE
	[Guid(0xc59dc1cb, 0xf129, 0xf361, 0xcc, 0x4f, 0x3e, 0xaa, 0x83, 0x64, 0x9d, 0xe7)]
	public partial interface TLMessageMediaInvoice : TLMessageMediaBase
	{
		bool IsShippingAddressRequested { get; set; }
		bool IsTest { get; set; }
		bool HasPhoto { get; set; }
		bool HasReceiptMsgId { get; set; }

		TLMessageMediaInvoiceFlag Flags { get; set; }
		String Title { get; set; }
		String Description { get; set; }
		TLWebDocument Photo { get; set; }
		Int32? ReceiptMsgId { get; set; }
		String Currency { get; set; }
		Int64 TotalAmount { get; set; }
		String StartParam { get; set; }
	}
#endif

}