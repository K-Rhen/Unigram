// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLPaymentRequestedInfo : ITLObject, TLPaymentRequestedInfo 
	{
		public bool HasName { get { return Flags.HasFlag(TLPaymentRequestedInfoFlag.Name); } set { Flags = value ? (Flags | TLPaymentRequestedInfoFlag.Name) : (Flags & ~TLPaymentRequestedInfoFlag.Name); } }
		public bool HasPhone { get { return Flags.HasFlag(TLPaymentRequestedInfoFlag.Phone); } set { Flags = value ? (Flags | TLPaymentRequestedInfoFlag.Phone) : (Flags & ~TLPaymentRequestedInfoFlag.Phone); } }
		public bool HasEmail { get { return Flags.HasFlag(TLPaymentRequestedInfoFlag.Email); } set { Flags = value ? (Flags | TLPaymentRequestedInfoFlag.Email) : (Flags & ~TLPaymentRequestedInfoFlag.Email); } }
		public bool HasShippingAddress { get { return Flags.HasFlag(TLPaymentRequestedInfoFlag.ShippingAddress); } set { Flags = value ? (Flags | TLPaymentRequestedInfoFlag.ShippingAddress) : (Flags & ~TLPaymentRequestedInfoFlag.ShippingAddress); } }

		public TLPaymentRequestedInfoFlag Flags { get; set; }
		public String Name { get; set; }
		public String Phone { get; set; }
		public String Email { get; set; }
		public TLPostAddress ShippingAddress { get; set; }

		public ITLPaymentRequestedInfo() { }
		public ITLPaymentRequestedInfo(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.PaymentRequestedInfo; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLPaymentRequestedInfoFlag)from.ReadInt32();
			if (HasName) Name = from.ReadString();
			if (HasPhone) Phone = from.ReadString();
			if (HasEmail) Email = from.ReadString();
			if (HasShippingAddress) ShippingAddress = TLFactory.Read<TLPostAddress>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x909C3F94);
			to.Write((Int32)Flags);
			if (HasName) to.Write(Name);
			if (HasPhone) to.Write(Phone);
			if (HasEmail) to.Write(Email);
			if (HasShippingAddress) to.WriteObject(ShippingAddress);
		}

		private void UpdateFlags()
		{
			HasName = Name != null;
			HasPhone = Phone != null;
			HasEmail = Email != null;
			HasShippingAddress = ShippingAddress != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLPaymentRequestedInfoFlag : Int32
	{
		Name = (1 << 0),
		Phone = (1 << 1),
		Email = (1 << 2),
		ShippingAddress = (1 << 3),
	}
#endif

#if !PORTABLE
	[Guid(0x0082831d, 0xdd0e, 0x6c86, 0x7a, 0xe7, 0xbf, 0x37, 0xc4, 0x82, 0xcd, 0x61)]
	public partial interface TLPaymentRequestedInfo : TLObject
	{
		bool HasName { get; set; }
		bool HasPhone { get; set; }
		bool HasEmail { get; set; }
		bool HasShippingAddress { get; set; }

		TLPaymentRequestedInfoFlag Flags { get; set; }
		String Name { get; set; }
		String Phone { get; set; }
		String Email { get; set; }
		TLPostAddress ShippingAddress { get; set; }
	}
#endif

}