// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLDialog : ITLObject, TLDialog, ITLReadMaxId 
	{
		public bool IsPinned { get { return Flags.HasFlag(TLDialogFlag.Pinned); } set { Flags = value ? (Flags | TLDialogFlag.Pinned) : (Flags & ~TLDialogFlag.Pinned); } }
		public bool HasPts { get { return Flags.HasFlag(TLDialogFlag.Pts); } set { Flags = value ? (Flags | TLDialogFlag.Pts) : (Flags & ~TLDialogFlag.Pts); } }
		public bool HasDraft { get { return Flags.HasFlag(TLDialogFlag.Draft); } set { Flags = value ? (Flags | TLDialogFlag.Draft) : (Flags & ~TLDialogFlag.Draft); } }

		public TLDialogFlag Flags { get; set; }
		public TLPeerBase Peer { get; set; }
		public Int32 TopMessage { get; set; }
		public Int32 ReadInboxMaxId { get; set; }
		public Int32 ReadOutboxMaxId { get; set; }
		public Int32 UnreadCount { get; set; }
		public TLPeerNotifySettingsBase NotifySettings { get; set; }
		public Int32? Pts { get; set; }
		public TLDraftMessageBase Draft { get; set; }

		public ITLDialog() { }
		public ITLDialog(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.Dialog; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLDialogFlag)from.ReadInt32();
			Peer = TLFactory.Read<TLPeerBase>(from);
			TopMessage = from.ReadInt32();
			ReadInboxMaxId = from.ReadInt32();
			ReadOutboxMaxId = from.ReadInt32();
			UnreadCount = from.ReadInt32();
			NotifySettings = TLFactory.Read<TLPeerNotifySettingsBase>(from);
			if (HasPts) Pts = from.ReadInt32();
			if (HasDraft) Draft = TLFactory.Read<TLDraftMessageBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x66FFBA14);
			to.Write((Int32)Flags);
			to.WriteObject(Peer);
			to.Write(TopMessage);
			to.Write(ReadInboxMaxId);
			to.Write(ReadOutboxMaxId);
			to.Write(UnreadCount);
			to.WriteObject(NotifySettings);
			if (HasPts) to.Write(Pts.Value);
			if (HasDraft) to.WriteObject(Draft);
		}

		private void UpdateFlags()
		{
			HasPts = Pts != null;
			HasDraft = Draft != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLDialogFlag : Int32
	{
		Pinned = (1 << 2),
		Pts = (1 << 0),
		Draft = (1 << 1),
	}
#endif

#if !PORTABLE
	[Guid(0x8decc791, 0x8b1c, 0x5eb7, 0x85, 0x3f, 0x70, 0xfe, 0xe3, 0x24, 0xa4, 0x3b)]
	public partial interface TLDialog : TLObject
	{
		bool IsPinned { get; set; }
		bool HasPts { get; set; }
		bool HasDraft { get; set; }

		TLDialogFlag Flags { get; set; }
		TLPeerBase Peer { get; set; }
		Int32 TopMessage { get; set; }
		Int32 ReadInboxMaxId { get; set; }
		Int32 ReadOutboxMaxId { get; set; }
		Int32 UnreadCount { get; set; }
		TLPeerNotifySettingsBase NotifySettings { get; set; }
		Int32? Pts { get; set; }
		TLDraftMessageBase Draft { get; set; }
	}
#endif

}