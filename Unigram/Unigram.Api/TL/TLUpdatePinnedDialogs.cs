// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLUpdatePinnedDialogs : ITLUpdateBase, TLUpdatePinnedDialogs 
	{
		public bool HasOrder { get { return Flags.HasFlag(TLUpdatePinnedDialogsFlag.Order); } set { Flags = value ? (Flags | TLUpdatePinnedDialogsFlag.Order) : (Flags & ~TLUpdatePinnedDialogsFlag.Order); } }

		public TLUpdatePinnedDialogsFlag Flags { get; set; }
		public TLVector<TLPeerBase> Order { get; set; }

		public ITLUpdatePinnedDialogs() { }
		public ITLUpdatePinnedDialogs(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.UpdatePinnedDialogs; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLUpdatePinnedDialogsFlag)from.ReadInt32();
			if (HasOrder) Order = TLFactory.Read<TLVector<TLPeerBase>>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0xD8CAF68D);
			to.Write((Int32)Flags);
			if (HasOrder) to.WriteObject(Order);
		}

		private void UpdateFlags()
		{
			HasOrder = Order != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLUpdatePinnedDialogsFlag : Int32
	{
		Order = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0x8340c33a, 0x292f, 0x15c1, 0x38, 0xfb, 0xe2, 0xd6, 0xf7, 0x5e, 0x8b, 0xcc)]
	public partial interface TLUpdatePinnedDialogs : TLUpdateBase
	{
		bool HasOrder { get; set; }

		TLUpdatePinnedDialogsFlag Flags { get; set; }
		TLVector<TLPeerBase> Order { get; set; }
	}
#endif

}