// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLPhoneCallAccepted : ITLPhoneCallBase, TLPhoneCallAccepted 
	{
		public Int64 AccessHash { get; set; }
		public Int32 Date { get; set; }
		public Int32 AdminId { get; set; }
		public Int32 ParticipantId { get; set; }
		public Byte[] GB { get; set; }
		public TLPhoneCallProtocol Protocol { get; set; }

		public ITLPhoneCallAccepted() { }
		public ITLPhoneCallAccepted(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.PhoneCallAccepted; } }

		public override void Read(TLBinaryReader from)
		{
			Id = from.ReadInt64();
			AccessHash = from.ReadInt64();
			Date = from.ReadInt32();
			AdminId = from.ReadInt32();
			ParticipantId = from.ReadInt32();
			GB = from.ReadByteArray();
			Protocol = TLFactory.Read<TLPhoneCallProtocol>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x6D003D3F);
			to.Write(Id);
			to.Write(AccessHash);
			to.Write(Date);
			to.Write(AdminId);
			to.Write(ParticipantId);
			to.WriteByteArray(GB);
			to.WriteObject(Protocol);
		}
	}

#if !PORTABLE
	[Guid(0x8aab306d, 0x4218, 0x45d3, 0x35, 0x19, 0x67, 0x9a, 0xea, 0x50, 0xa9, 0x1a)]
	public partial interface TLPhoneCallAccepted : TLPhoneCallBase
	{
		Int64 Id { get; set; }
		Int64 AccessHash { get; set; }
		Int32 Date { get; set; }
		Int32 AdminId { get; set; }
		Int32 ParticipantId { get; set; }
		Byte[] GB { get; set; }
		TLPhoneCallProtocol Protocol { get; set; }
	}
#endif

}