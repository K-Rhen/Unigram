// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLUser : ITLUserBase, TLUser 
	{
		public bool IsSelf { get { return Flags.HasFlag(TLUserFlag.Self); } set { Flags = value ? (Flags | TLUserFlag.Self) : (Flags & ~TLUserFlag.Self); } }
		public bool IsContact { get { return Flags.HasFlag(TLUserFlag.Contact); } set { Flags = value ? (Flags | TLUserFlag.Contact) : (Flags & ~TLUserFlag.Contact); } }
		public bool IsMutualContact { get { return Flags.HasFlag(TLUserFlag.MutualContact); } set { Flags = value ? (Flags | TLUserFlag.MutualContact) : (Flags & ~TLUserFlag.MutualContact); } }
		public bool IsDeleted { get { return Flags.HasFlag(TLUserFlag.Deleted); } set { Flags = value ? (Flags | TLUserFlag.Deleted) : (Flags & ~TLUserFlag.Deleted); } }
		public bool IsBot { get { return Flags.HasFlag(TLUserFlag.Bot); } set { Flags = value ? (Flags | TLUserFlag.Bot) : (Flags & ~TLUserFlag.Bot); } }
		public bool IsBotChatHistory { get { return Flags.HasFlag(TLUserFlag.BotChatHistory); } set { Flags = value ? (Flags | TLUserFlag.BotChatHistory) : (Flags & ~TLUserFlag.BotChatHistory); } }
		public bool IsBotNochats { get { return Flags.HasFlag(TLUserFlag.BotNochats); } set { Flags = value ? (Flags | TLUserFlag.BotNochats) : (Flags & ~TLUserFlag.BotNochats); } }
		public bool IsVerified { get { return Flags.HasFlag(TLUserFlag.Verified); } set { Flags = value ? (Flags | TLUserFlag.Verified) : (Flags & ~TLUserFlag.Verified); } }
		public bool IsRestricted { get { return Flags.HasFlag(TLUserFlag.Restricted); } set { Flags = value ? (Flags | TLUserFlag.Restricted) : (Flags & ~TLUserFlag.Restricted); } }
		public bool IsMin { get { return Flags.HasFlag(TLUserFlag.Min); } set { Flags = value ? (Flags | TLUserFlag.Min) : (Flags & ~TLUserFlag.Min); } }
		public bool IsBotInlineGeo { get { return Flags.HasFlag(TLUserFlag.BotInlineGeo); } set { Flags = value ? (Flags | TLUserFlag.BotInlineGeo) : (Flags & ~TLUserFlag.BotInlineGeo); } }
		public bool HasAccessHash { get { return Flags.HasFlag(TLUserFlag.AccessHash); } set { Flags = value ? (Flags | TLUserFlag.AccessHash) : (Flags & ~TLUserFlag.AccessHash); } }
		public bool HasFirstName { get { return Flags.HasFlag(TLUserFlag.FirstName); } set { Flags = value ? (Flags | TLUserFlag.FirstName) : (Flags & ~TLUserFlag.FirstName); } }
		public bool HasLastName { get { return Flags.HasFlag(TLUserFlag.LastName); } set { Flags = value ? (Flags | TLUserFlag.LastName) : (Flags & ~TLUserFlag.LastName); } }
		public bool HasUsername { get { return Flags.HasFlag(TLUserFlag.Username); } set { Flags = value ? (Flags | TLUserFlag.Username) : (Flags & ~TLUserFlag.Username); } }
		public bool HasPhone { get { return Flags.HasFlag(TLUserFlag.Phone); } set { Flags = value ? (Flags | TLUserFlag.Phone) : (Flags & ~TLUserFlag.Phone); } }
		public bool HasPhoto { get { return Flags.HasFlag(TLUserFlag.Photo); } set { Flags = value ? (Flags | TLUserFlag.Photo) : (Flags & ~TLUserFlag.Photo); } }
		public bool HasStatus { get { return Flags.HasFlag(TLUserFlag.Status); } set { Flags = value ? (Flags | TLUserFlag.Status) : (Flags & ~TLUserFlag.Status); } }
		public bool HasBotInfoVersion { get { return Flags.HasFlag(TLUserFlag.BotInfoVersion); } set { Flags = value ? (Flags | TLUserFlag.BotInfoVersion) : (Flags & ~TLUserFlag.BotInfoVersion); } }
		public bool HasRestrictionReason { get { return Flags.HasFlag(TLUserFlag.RestrictionReason); } set { Flags = value ? (Flags | TLUserFlag.RestrictionReason) : (Flags & ~TLUserFlag.RestrictionReason); } }
		public bool HasBotInlinePlaceholder { get { return Flags.HasFlag(TLUserFlag.BotInlinePlaceholder); } set { Flags = value ? (Flags | TLUserFlag.BotInlinePlaceholder) : (Flags & ~TLUserFlag.BotInlinePlaceholder); } }

		public TLUserFlag Flags { get; set; }
		public Int64? AccessHash { get; set; }
		public String FirstName { get; set; }
		public String LastName { get; set; }
		public String Username { get; set; }
		public String Phone { get; set; }
		public TLUserProfilePhotoBase Photo { get; set; }
		public TLUserStatusBase Status { get; set; }
		public Int32? BotInfoVersion { get; set; }
		public String RestrictionReason { get; set; }
		public String BotInlinePlaceholder { get; set; }

		public ITLUser() { }
		public ITLUser(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.User; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLUserFlag)from.ReadInt32();
			Id = from.ReadInt32();
			if (HasAccessHash) AccessHash = from.ReadInt64();
			if (HasFirstName) FirstName = from.ReadString();
			if (HasLastName) LastName = from.ReadString();
			if (HasUsername) Username = from.ReadString();
			if (HasPhone) Phone = from.ReadString();
			if (HasPhoto) Photo = TLFactory.Read<TLUserProfilePhotoBase>(from);
			if (HasStatus) Status = TLFactory.Read<TLUserStatusBase>(from);
			if (HasBotInfoVersion) BotInfoVersion = from.ReadInt32();
			if (HasRestrictionReason) RestrictionReason = from.ReadString();
			if (HasBotInlinePlaceholder) BotInlinePlaceholder = from.ReadString();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0xD10D979A);
			to.Write((Int32)Flags);
			to.Write(Id);
			if (HasAccessHash) to.Write(AccessHash.Value);
			if (HasFirstName) to.Write(FirstName);
			if (HasLastName) to.Write(LastName);
			if (HasUsername) to.Write(Username);
			if (HasPhone) to.Write(Phone);
			if (HasPhoto) to.WriteObject(Photo);
			if (HasStatus) to.WriteObject(Status);
			if (HasBotInfoVersion) to.Write(BotInfoVersion.Value);
			if (HasRestrictionReason) to.Write(RestrictionReason);
			if (HasBotInlinePlaceholder) to.Write(BotInlinePlaceholder);
		}

		private void UpdateFlags()
		{
			HasAccessHash = AccessHash != null;
			HasFirstName = FirstName != null;
			HasLastName = LastName != null;
			HasUsername = Username != null;
			HasPhone = Phone != null;
			HasPhoto = Photo != null;
			HasStatus = Status != null;
			HasBotInfoVersion = BotInfoVersion != null;
			HasRestrictionReason = RestrictionReason != null;
			HasBotInlinePlaceholder = BotInlinePlaceholder != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLUserFlag : Int32
	{
		Self = (1 << 10),
		Contact = (1 << 11),
		MutualContact = (1 << 12),
		Deleted = (1 << 13),
		Bot = (1 << 14),
		BotChatHistory = (1 << 15),
		BotNochats = (1 << 16),
		Verified = (1 << 17),
		Restricted = (1 << 18),
		Min = (1 << 20),
		BotInlineGeo = (1 << 21),
		AccessHash = (1 << 0),
		FirstName = (1 << 1),
		LastName = (1 << 2),
		Username = (1 << 3),
		Phone = (1 << 4),
		Photo = (1 << 5),
		Status = (1 << 6),
		BotInfoVersion = (1 << 14),
		RestrictionReason = (1 << 18),
		BotInlinePlaceholder = (1 << 19),
	}
#endif

#if !PORTABLE
	[Guid(0xb1cb11ee, 0x5290, 0x0be4, 0x07, 0xaa, 0xc0, 0xca, 0x06, 0x0c, 0x23, 0xee)]
	public partial interface TLUser : TLUserBase
	{
		bool IsSelf { get; set; }
		bool IsContact { get; set; }
		bool IsMutualContact { get; set; }
		bool IsDeleted { get; set; }
		bool IsBot { get; set; }
		bool IsBotChatHistory { get; set; }
		bool IsBotNochats { get; set; }
		bool IsVerified { get; set; }
		bool IsRestricted { get; set; }
		bool IsMin { get; set; }
		bool IsBotInlineGeo { get; set; }
		bool HasAccessHash { get; set; }
		bool HasFirstName { get; set; }
		bool HasLastName { get; set; }
		bool HasUsername { get; set; }
		bool HasPhone { get; set; }
		bool HasPhoto { get; set; }
		bool HasStatus { get; set; }
		bool HasBotInfoVersion { get; set; }
		bool HasRestrictionReason { get; set; }
		bool HasBotInlinePlaceholder { get; set; }

		TLUserFlag Flags { get; set; }
		Int32 Id { get; set; }
		Int64? AccessHash { get; set; }
		String FirstName { get; set; }
		String LastName { get; set; }
		String Username { get; set; }
		String Phone { get; set; }
		TLUserProfilePhotoBase Photo { get; set; }
		TLUserStatusBase Status { get; set; }
		Int32? BotInfoVersion { get; set; }
		String RestrictionReason { get; set; }
		String BotInlinePlaceholder { get; set; }
	}
#endif

}