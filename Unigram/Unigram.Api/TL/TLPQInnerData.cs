// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLPQInnerData : ITLObject, TLPQInnerData 
	{
		public Byte[] PQ { get; set; }
		public Byte[] P { get; set; }
		public Byte[] Q { get; set; }
		public TLInt128 Nonce { get; set; }
		public TLInt128 ServerNonce { get; set; }
		public TLInt256 NewNonce { get; set; }

		public ITLPQInnerData() { }
		public ITLPQInnerData(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.PQInnerData; } }

		public override void Read(TLBinaryReader from)
		{
			PQ = from.ReadByteArray();
			P = from.ReadByteArray();
			Q = from.ReadByteArray();
			Nonce = TLFactory.Read<TLInt128>(from);
			ServerNonce = TLFactory.Read<TLInt128>(from);
			NewNonce = TLFactory.Read<TLInt256>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x83C95AEC);
			to.WriteByteArray(PQ);
			to.WriteByteArray(P);
			to.WriteByteArray(Q);
			to.WriteObject(Nonce);
			to.WriteObject(ServerNonce);
			to.WriteObject(NewNonce);
		}
	}

#if !PORTABLE
	[Guid(0x53c5e5e3, 0xd5a3, 0xe9f4, 0x49, 0xdc, 0x57, 0x0e, 0x79, 0x08, 0xfc, 0x74)]
	public partial interface TLPQInnerData : TLObject
	{
		Byte[] PQ { get; set; }
		Byte[] P { get; set; }
		Byte[] Q { get; set; }
		TLInt128 Nonce { get; set; }
		TLInt128 ServerNonce { get; set; }
		TLInt256 NewNonce { get; set; }
	}
#endif

}