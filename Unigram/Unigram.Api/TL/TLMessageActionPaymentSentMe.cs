// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessageActionPaymentSentMe : ITLMessageActionBase, TLMessageActionPaymentSentMe 
	{
		public bool HasInfo { get { return Flags.HasFlag(TLMessageActionPaymentSentMeFlag.Info); } set { Flags = value ? (Flags | TLMessageActionPaymentSentMeFlag.Info) : (Flags & ~TLMessageActionPaymentSentMeFlag.Info); } }
		public bool HasShippingOptionId { get { return Flags.HasFlag(TLMessageActionPaymentSentMeFlag.ShippingOptionId); } set { Flags = value ? (Flags | TLMessageActionPaymentSentMeFlag.ShippingOptionId) : (Flags & ~TLMessageActionPaymentSentMeFlag.ShippingOptionId); } }

		public TLMessageActionPaymentSentMeFlag Flags { get; set; }
		public String Currency { get; set; }
		public Int64 TotalAmount { get; set; }
		public Byte[] Payload { get; set; }
		public TLPaymentRequestedInfo Info { get; set; }
		public String ShippingOptionId { get; set; }
		public TLPaymentCharge Charge { get; set; }

		public ITLMessageActionPaymentSentMe() { }
		public ITLMessageActionPaymentSentMe(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessageActionPaymentSentMe; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessageActionPaymentSentMeFlag)from.ReadInt32();
			Currency = from.ReadString();
			TotalAmount = from.ReadInt64();
			Payload = from.ReadByteArray();
			if (HasInfo) Info = TLFactory.Read<TLPaymentRequestedInfo>(from);
			if (HasShippingOptionId) ShippingOptionId = from.ReadString();
			Charge = TLFactory.Read<TLPaymentCharge>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x8F31B327);
			to.Write((Int32)Flags);
			to.Write(Currency);
			to.Write(TotalAmount);
			to.WriteByteArray(Payload);
			if (HasInfo) to.WriteObject(Info);
			if (HasShippingOptionId) to.Write(ShippingOptionId);
			to.WriteObject(Charge);
		}

		private void UpdateFlags()
		{
			HasInfo = Info != null;
			HasShippingOptionId = ShippingOptionId != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessageActionPaymentSentMeFlag : Int32
	{
		Info = (1 << 0),
		ShippingOptionId = (1 << 1),
	}
#endif

#if !PORTABLE
	[Guid(0xb7ad6125, 0xe49b, 0x6bc2, 0x5b, 0x0d, 0x45, 0x94, 0xee, 0x69, 0x89, 0x21)]
	public partial interface TLMessageActionPaymentSentMe : TLMessageActionBase
	{
		bool HasInfo { get; set; }
		bool HasShippingOptionId { get; set; }

		TLMessageActionPaymentSentMeFlag Flags { get; set; }
		String Currency { get; set; }
		Int64 TotalAmount { get; set; }
		Byte[] Payload { get; set; }
		TLPaymentRequestedInfo Info { get; set; }
		String ShippingOptionId { get; set; }
		TLPaymentCharge Charge { get; set; }
	}
#endif

}