// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLChannelFull : ITLChatFullBase, TLChannelFull, ITLReadMaxId 
	{
		public bool IsCanViewParticipants { get { return Flags.HasFlag(TLChannelFullFlag.CanViewParticipants); } set { Flags = value ? (Flags | TLChannelFullFlag.CanViewParticipants) : (Flags & ~TLChannelFullFlag.CanViewParticipants); } }
		public bool IsCanSetUsername { get { return Flags.HasFlag(TLChannelFullFlag.CanSetUsername); } set { Flags = value ? (Flags | TLChannelFullFlag.CanSetUsername) : (Flags & ~TLChannelFullFlag.CanSetUsername); } }
		public bool HasParticipantsCount { get { return Flags.HasFlag(TLChannelFullFlag.ParticipantsCount); } set { Flags = value ? (Flags | TLChannelFullFlag.ParticipantsCount) : (Flags & ~TLChannelFullFlag.ParticipantsCount); } }
		public bool HasAdminsCount { get { return Flags.HasFlag(TLChannelFullFlag.AdminsCount); } set { Flags = value ? (Flags | TLChannelFullFlag.AdminsCount) : (Flags & ~TLChannelFullFlag.AdminsCount); } }
		public bool HasKickedCount { get { return Flags.HasFlag(TLChannelFullFlag.KickedCount); } set { Flags = value ? (Flags | TLChannelFullFlag.KickedCount) : (Flags & ~TLChannelFullFlag.KickedCount); } }
		public bool HasMigratedFromChatId { get { return Flags.HasFlag(TLChannelFullFlag.MigratedFromChatId); } set { Flags = value ? (Flags | TLChannelFullFlag.MigratedFromChatId) : (Flags & ~TLChannelFullFlag.MigratedFromChatId); } }
		public bool HasMigratedFromMaxId { get { return Flags.HasFlag(TLChannelFullFlag.MigratedFromMaxId); } set { Flags = value ? (Flags | TLChannelFullFlag.MigratedFromMaxId) : (Flags & ~TLChannelFullFlag.MigratedFromMaxId); } }
		public bool HasPinnedMsgId { get { return Flags.HasFlag(TLChannelFullFlag.PinnedMsgId); } set { Flags = value ? (Flags | TLChannelFullFlag.PinnedMsgId) : (Flags & ~TLChannelFullFlag.PinnedMsgId); } }

		public TLChannelFullFlag Flags { get; set; }
		public String About { get; set; }
		public Int32? ParticipantsCount { get; set; }
		public Int32? AdminsCount { get; set; }
		public Int32? KickedCount { get; set; }
		public Int32 ReadInboxMaxId { get; set; }
		public Int32 ReadOutboxMaxId { get; set; }
		public Int32 UnreadCount { get; set; }
		public Int32? MigratedFromChatId { get; set; }
		public Int32? MigratedFromMaxId { get; set; }
		public Int32? PinnedMsgId { get; set; }

		public ITLChannelFull() { }
		public ITLChannelFull(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.ChannelFull; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLChannelFullFlag)from.ReadInt32();
			Id = from.ReadInt32();
			About = from.ReadString();
			if (HasParticipantsCount) ParticipantsCount = from.ReadInt32();
			if (HasAdminsCount) AdminsCount = from.ReadInt32();
			if (HasKickedCount) KickedCount = from.ReadInt32();
			ReadInboxMaxId = from.ReadInt32();
			ReadOutboxMaxId = from.ReadInt32();
			UnreadCount = from.ReadInt32();
			ChatPhoto = TLFactory.Read<TLPhotoBase>(from);
			NotifySettings = TLFactory.Read<TLPeerNotifySettingsBase>(from);
			ExportedInvite = TLFactory.Read<TLExportedChatInviteBase>(from);
			BotInfo = TLFactory.Read<TLVector<TLBotInfo>>(from);
			if (HasMigratedFromChatId) MigratedFromChatId = from.ReadInt32();
			if (HasMigratedFromMaxId) MigratedFromMaxId = from.ReadInt32();
			if (HasPinnedMsgId) PinnedMsgId = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0xC3D5512F);
			to.Write((Int32)Flags);
			to.Write(Id);
			to.Write(About);
			if (HasParticipantsCount) to.Write(ParticipantsCount.Value);
			if (HasAdminsCount) to.Write(AdminsCount.Value);
			if (HasKickedCount) to.Write(KickedCount.Value);
			to.Write(ReadInboxMaxId);
			to.Write(ReadOutboxMaxId);
			to.Write(UnreadCount);
			to.WriteObject(ChatPhoto);
			to.WriteObject(NotifySettings);
			to.WriteObject(ExportedInvite);
			to.WriteObject(BotInfo);
			if (HasMigratedFromChatId) to.Write(MigratedFromChatId.Value);
			if (HasMigratedFromMaxId) to.Write(MigratedFromMaxId.Value);
			if (HasPinnedMsgId) to.Write(PinnedMsgId.Value);
		}

		private void UpdateFlags()
		{
			HasParticipantsCount = ParticipantsCount != null;
			HasAdminsCount = AdminsCount != null;
			HasKickedCount = KickedCount != null;
			HasMigratedFromChatId = MigratedFromChatId != null;
			HasMigratedFromMaxId = MigratedFromMaxId != null;
			HasPinnedMsgId = PinnedMsgId != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLChannelFullFlag : Int32
	{
		CanViewParticipants = (1 << 3),
		CanSetUsername = (1 << 6),
		ParticipantsCount = (1 << 0),
		AdminsCount = (1 << 1),
		KickedCount = (1 << 2),
		MigratedFromChatId = (1 << 4),
		MigratedFromMaxId = (1 << 4),
		PinnedMsgId = (1 << 5),
	}
#endif

#if !PORTABLE
	[Guid(0xbc8a6f0d, 0x9eae, 0x6402, 0xba, 0xb3, 0x83, 0x7c, 0xc3, 0xf6, 0x48, 0x9d)]
	public partial interface TLChannelFull : TLChatFullBase
	{
		bool IsCanViewParticipants { get; set; }
		bool IsCanSetUsername { get; set; }
		bool HasParticipantsCount { get; set; }
		bool HasAdminsCount { get; set; }
		bool HasKickedCount { get; set; }
		bool HasMigratedFromChatId { get; set; }
		bool HasMigratedFromMaxId { get; set; }
		bool HasPinnedMsgId { get; set; }

		TLChannelFullFlag Flags { get; set; }
		Int32 Id { get; set; }
		String About { get; set; }
		Int32? ParticipantsCount { get; set; }
		Int32? AdminsCount { get; set; }
		Int32? KickedCount { get; set; }
		Int32 ReadInboxMaxId { get; set; }
		Int32 ReadOutboxMaxId { get; set; }
		Int32 UnreadCount { get; set; }
		TLPhotoBase ChatPhoto { get; set; }
		TLPeerNotifySettingsBase NotifySettings { get; set; }
		TLExportedChatInviteBase ExportedInvite { get; set; }
		TLVector<TLBotInfo> BotInfo { get; set; }
		Int32? MigratedFromChatId { get; set; }
		Int32? MigratedFromMaxId { get; set; }
		Int32? PinnedMsgId { get; set; }
	}
#endif

}