// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessageService : ITLMessageCommonBase, TLMessageService 
	{
		public override bool IsOut { get { return Flags.HasFlag(TLMessageServiceFlag.Out); } set { Flags = value ? (Flags | TLMessageServiceFlag.Out) : (Flags & ~TLMessageServiceFlag.Out); } }
		public override bool IsMentioned { get { return Flags.HasFlag(TLMessageServiceFlag.Mentioned); } set { Flags = value ? (Flags | TLMessageServiceFlag.Mentioned) : (Flags & ~TLMessageServiceFlag.Mentioned); } }
		public override bool IsMediaUnread { get { return Flags.HasFlag(TLMessageServiceFlag.MediaUnread); } set { Flags = value ? (Flags | TLMessageServiceFlag.MediaUnread) : (Flags & ~TLMessageServiceFlag.MediaUnread); } }
		public override bool IsSilent { get { return Flags.HasFlag(TLMessageServiceFlag.Silent); } set { Flags = value ? (Flags | TLMessageServiceFlag.Silent) : (Flags & ~TLMessageServiceFlag.Silent); } }
		public override bool IsPost { get { return Flags.HasFlag(TLMessageServiceFlag.Post); } set { Flags = value ? (Flags | TLMessageServiceFlag.Post) : (Flags & ~TLMessageServiceFlag.Post); } }
		public bool HasFromId { get { return Flags.HasFlag(TLMessageServiceFlag.FromId); } set { Flags = value ? (Flags | TLMessageServiceFlag.FromId) : (Flags & ~TLMessageServiceFlag.FromId); } }
		public bool HasReplyToMsgId { get { return Flags.HasFlag(TLMessageServiceFlag.ReplyToMsgId); } set { Flags = value ? (Flags | TLMessageServiceFlag.ReplyToMsgId) : (Flags & ~TLMessageServiceFlag.ReplyToMsgId); } }

		public TLMessageServiceFlag Flags { get; set; }
		public TLMessageActionBase Action { get; set; }

		public ITLMessageService() { }
		public ITLMessageService(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessageService; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessageServiceFlag)from.ReadInt32();
			Id = from.ReadInt32();
			if (HasFromId) FromId = from.ReadInt32();
			ToId = TLFactory.Read<TLPeerBase>(from);
			if (HasReplyToMsgId) ReplyToMsgId = from.ReadInt32();
			Date = from.ReadInt32();
			Action = TLFactory.Read<TLMessageActionBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x9E19A1F6);
			to.Write((Int32)Flags);
			to.Write(Id);
			if (HasFromId) to.Write(FromId.Value);
			to.WriteObject(ToId);
			if (HasReplyToMsgId) to.Write(ReplyToMsgId.Value);
			to.Write(Date);
			to.WriteObject(Action);
		}

		private void UpdateFlags()
		{
			HasFromId = FromId != null;
			HasReplyToMsgId = ReplyToMsgId != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessageServiceFlag : Int32
	{
		Out = (1 << 1),
		Mentioned = (1 << 4),
		MediaUnread = (1 << 5),
		Silent = (1 << 13),
		Post = (1 << 14),
		FromId = (1 << 8),
		ReplyToMsgId = (1 << 3),
	}
#endif

#if !PORTABLE
	[Guid(0xfbf501df, 0x2941, 0xc23a, 0x4c, 0x21, 0x44, 0x09, 0xfe, 0x3e, 0x26, 0x48)]
	public partial interface TLMessageService : TLMessageCommonBase
	{
		bool HasFromId { get; set; }
		bool HasReplyToMsgId { get; set; }

		TLMessageServiceFlag Flags { get; set; }
		Int32 Id { get; set; }
		Int32? FromId { get; set; }
		TLPeerBase ToId { get; set; }
		Int32? ReplyToMsgId { get; set; }
		Int32 Date { get; set; }
		TLMessageActionBase Action { get; set; }
	}
#endif

}