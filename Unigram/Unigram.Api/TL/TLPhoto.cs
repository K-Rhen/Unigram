// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLPhoto : ITLPhotoBase, TLPhoto 
	{
		public bool IsHasStickers { get { return Flags.HasFlag(TLPhotoFlag.HasStickers); } set { Flags = value ? (Flags | TLPhotoFlag.HasStickers) : (Flags & ~TLPhotoFlag.HasStickers); } }

		public TLPhotoFlag Flags { get; set; }
		public Int64 AccessHash { get; set; }
		public Int32 Date { get; set; }
		public TLVector<TLPhotoSizeBase> Sizes { get; set; }

		public ITLPhoto() { }
		public ITLPhoto(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.Photo; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLPhotoFlag)from.ReadInt32();
			Id = from.ReadInt64();
			AccessHash = from.ReadInt64();
			Date = from.ReadInt32();
			Sizes = TLFactory.Read<TLVector<TLPhotoSizeBase>>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x9288DD29);
			to.Write((Int32)Flags);
			to.Write(Id);
			to.Write(AccessHash);
			to.Write(Date);
			to.WriteObject(Sizes);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLPhotoFlag : Int32
	{
		HasStickers = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0xc8c1e05a, 0x26a5, 0xc70b, 0xb6, 0x64, 0x8f, 0x6f, 0xbd, 0x11, 0x5c, 0x35)]
	public partial interface TLPhoto : TLPhotoBase
	{
		bool IsHasStickers { get; set; }

		TLPhotoFlag Flags { get; set; }
		Int64 Id { get; set; }
		Int64 AccessHash { get; set; }
		Int32 Date { get; set; }
		TLVector<TLPhotoSizeBase> Sizes { get; set; }
	}
#endif

}