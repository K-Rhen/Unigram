// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLPageBlockEmbedPost : ITLPageBlockBase, TLPageBlockEmbedPost 
	{
		public String Url { get; set; }
		public Int64 WebPageId { get; set; }
		public Int64 AuthorPhotoId { get; set; }
		public String Author { get; set; }
		public Int32 Date { get; set; }
		public TLVector<TLPageBlockBase> Blocks { get; set; }
		public TLRichTextBase Caption { get; set; }

		public ITLPageBlockEmbedPost() { }
		public ITLPageBlockEmbedPost(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.PageBlockEmbedPost; } }

		public override void Read(TLBinaryReader from)
		{
			Url = from.ReadString();
			WebPageId = from.ReadInt64();
			AuthorPhotoId = from.ReadInt64();
			Author = from.ReadString();
			Date = from.ReadInt32();
			Blocks = TLFactory.Read<TLVector<TLPageBlockBase>>(from);
			Caption = TLFactory.Read<TLRichTextBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x292C7BE9);
			to.Write(Url);
			to.Write(WebPageId);
			to.Write(AuthorPhotoId);
			to.Write(Author);
			to.Write(Date);
			to.WriteObject(Blocks);
			to.WriteObject(Caption);
		}
	}

#if !PORTABLE
	[Guid(0x784d446a, 0x4e73, 0x3e67, 0xb1, 0x20, 0xe8, 0xd2, 0xc6, 0xec, 0x8d, 0x4d)]
	public partial interface TLPageBlockEmbedPost : TLPageBlockBase
	{
		String Url { get; set; }
		Int64 WebPageId { get; set; }
		Int64 AuthorPhotoId { get; set; }
		String Author { get; set; }
		Int32 Date { get; set; }
		TLVector<TLPageBlockBase> Blocks { get; set; }
		TLRichTextBase Caption { get; set; }
	}
#endif

}