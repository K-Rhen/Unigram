// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLBotInlineMediaResult : ITLBotInlineResultBase, TLBotInlineMediaResult 
	{
		public bool HasPhoto { get { return Flags.HasFlag(TLBotInlineMediaResultFlag.Photo); } set { Flags = value ? (Flags | TLBotInlineMediaResultFlag.Photo) : (Flags & ~TLBotInlineMediaResultFlag.Photo); } }
		public bool HasDocument { get { return Flags.HasFlag(TLBotInlineMediaResultFlag.Document); } set { Flags = value ? (Flags | TLBotInlineMediaResultFlag.Document) : (Flags & ~TLBotInlineMediaResultFlag.Document); } }
		public bool HasTitle { get { return Flags.HasFlag(TLBotInlineMediaResultFlag.Title); } set { Flags = value ? (Flags | TLBotInlineMediaResultFlag.Title) : (Flags & ~TLBotInlineMediaResultFlag.Title); } }
		public bool HasDescription { get { return Flags.HasFlag(TLBotInlineMediaResultFlag.Description); } set { Flags = value ? (Flags | TLBotInlineMediaResultFlag.Description) : (Flags & ~TLBotInlineMediaResultFlag.Description); } }

		public TLBotInlineMediaResultFlag Flags { get; set; }
		public TLPhotoBase Photo { get; set; }
		public TLDocumentBase Document { get; set; }

		public ITLBotInlineMediaResult() { }
		public ITLBotInlineMediaResult(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.BotInlineMediaResult; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLBotInlineMediaResultFlag)from.ReadInt32();
			Id = from.ReadString();
			Type = from.ReadString();
			if (HasPhoto) Photo = TLFactory.Read<TLPhotoBase>(from);
			if (HasDocument) Document = TLFactory.Read<TLDocumentBase>(from);
			if (HasTitle) Title = from.ReadString();
			if (HasDescription) Description = from.ReadString();
			SendMessage = TLFactory.Read<TLBotInlineMessageBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x17DB940B);
			to.Write((Int32)Flags);
			to.Write(Id);
			to.Write(Type);
			if (HasPhoto) to.WriteObject(Photo);
			if (HasDocument) to.WriteObject(Document);
			if (HasTitle) to.Write(Title);
			if (HasDescription) to.Write(Description);
			to.WriteObject(SendMessage);
		}

		private void UpdateFlags()
		{
			HasPhoto = Photo != null;
			HasDocument = Document != null;
			HasTitle = Title != null;
			HasDescription = Description != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLBotInlineMediaResultFlag : Int32
	{
		Photo = (1 << 0),
		Document = (1 << 1),
		Title = (1 << 2),
		Description = (1 << 3),
	}
#endif

#if !PORTABLE
	[Guid(0x540a2843, 0x7bb2, 0x02b0, 0x93, 0xdf, 0xae, 0xec, 0x54, 0x84, 0x8c, 0x96)]
	public partial interface TLBotInlineMediaResult : TLBotInlineResultBase
	{
		bool HasPhoto { get; set; }
		bool HasDocument { get; set; }
		bool HasTitle { get; set; }
		bool HasDescription { get; set; }

		TLBotInlineMediaResultFlag Flags { get; set; }
		String Id { get; set; }
		String Type { get; set; }
		TLPhotoBase Photo { get; set; }
		TLDocumentBase Document { get; set; }
		String Title { get; set; }
		String Description { get; set; }
		TLBotInlineMessageBase SendMessage { get; set; }
	}
#endif

}