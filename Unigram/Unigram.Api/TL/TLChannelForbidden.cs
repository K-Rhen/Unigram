// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLChannelForbidden : ITLChatBase, TLChannelForbidden 
	{
		public bool IsBroadcast { get { return Flags.HasFlag(TLChannelForbiddenFlag.Broadcast); } set { Flags = value ? (Flags | TLChannelForbiddenFlag.Broadcast) : (Flags & ~TLChannelForbiddenFlag.Broadcast); } }
		public bool IsMegaGroup { get { return Flags.HasFlag(TLChannelForbiddenFlag.MegaGroup); } set { Flags = value ? (Flags | TLChannelForbiddenFlag.MegaGroup) : (Flags & ~TLChannelForbiddenFlag.MegaGroup); } }

		public TLChannelForbiddenFlag Flags { get; set; }
		public Int64 AccessHash { get; set; }
		public String Title { get; set; }

		public ITLChannelForbidden() { }
		public ITLChannelForbidden(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.ChannelForbidden; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLChannelForbiddenFlag)from.ReadInt32();
			Id = from.ReadInt32();
			AccessHash = from.ReadInt64();
			Title = from.ReadString();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x8537784F);
			to.Write((Int32)Flags);
			to.Write(Id);
			to.Write(AccessHash);
			to.Write(Title);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLChannelForbiddenFlag : Int32
	{
		Broadcast = (1 << 5),
		MegaGroup = (1 << 8),
	}
#endif

#if !PORTABLE
	[Guid(0xebf38aaa, 0x48e1, 0xa731, 0xcd, 0x1b, 0x6d, 0x13, 0x83, 0xa0, 0x37, 0x55)]
	public partial interface TLChannelForbidden : TLChatBase
	{
		bool IsBroadcast { get; set; }
		bool IsMegaGroup { get; set; }

		TLChannelForbiddenFlag Flags { get; set; }
		Int32 Id { get; set; }
		Int64 AccessHash { get; set; }
		String Title { get; set; }
	}
#endif

}