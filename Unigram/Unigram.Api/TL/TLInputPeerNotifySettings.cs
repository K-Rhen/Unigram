// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLInputPeerNotifySettings : ITLObject, TLInputPeerNotifySettings 
	{
		public bool IsShowPreviews { get { return Flags.HasFlag(TLInputPeerNotifySettingsFlag.ShowPreviews); } set { Flags = value ? (Flags | TLInputPeerNotifySettingsFlag.ShowPreviews) : (Flags & ~TLInputPeerNotifySettingsFlag.ShowPreviews); } }
		public bool IsSilent { get { return Flags.HasFlag(TLInputPeerNotifySettingsFlag.Silent); } set { Flags = value ? (Flags | TLInputPeerNotifySettingsFlag.Silent) : (Flags & ~TLInputPeerNotifySettingsFlag.Silent); } }

		public TLInputPeerNotifySettingsFlag Flags { get; set; }
		public Int32 MuteUntil { get; set; }
		public String Sound { get; set; }

		public ITLInputPeerNotifySettings() { }
		public ITLInputPeerNotifySettings(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.InputPeerNotifySettings; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLInputPeerNotifySettingsFlag)from.ReadInt32();
			MuteUntil = from.ReadInt32();
			Sound = from.ReadString();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x38935EB2);
			to.Write((Int32)Flags);
			to.Write(MuteUntil);
			to.Write(Sound);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLInputPeerNotifySettingsFlag : Int32
	{
		ShowPreviews = (1 << 0),
		Silent = (1 << 1),
	}
#endif

#if !PORTABLE
	[Guid(0xec57bc29, 0x7af5, 0xf8a0, 0x35, 0x3a, 0xc9, 0x36, 0xea, 0xbd, 0x57, 0x23)]
	public partial interface TLInputPeerNotifySettings : TLObject
	{
		bool IsShowPreviews { get; set; }
		bool IsSilent { get; set; }

		TLInputPeerNotifySettingsFlag Flags { get; set; }
		Int32 MuteUntil { get; set; }
		String Sound { get; set; }
	}
#endif

}