// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLUpdateStickerSetsOrder : ITLUpdateBase, TLUpdateStickerSetsOrder 
	{
		public bool IsMasks { get { return Flags.HasFlag(TLUpdateStickerSetsOrderFlag.Masks); } set { Flags = value ? (Flags | TLUpdateStickerSetsOrderFlag.Masks) : (Flags & ~TLUpdateStickerSetsOrderFlag.Masks); } }

		public TLUpdateStickerSetsOrderFlag Flags { get; set; }
		public TLVector<Int64> Order { get; set; }

		public ITLUpdateStickerSetsOrder() { }
		public ITLUpdateStickerSetsOrder(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.UpdateStickerSetsOrder; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLUpdateStickerSetsOrderFlag)from.ReadInt32();
			Order = TLFactory.Read<TLVector<Int64>>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xBB2D201);
			to.Write((Int32)Flags);
			to.WriteObject(Order);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLUpdateStickerSetsOrderFlag : Int32
	{
		Masks = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0x8340c33a, 0x292f, 0x15c1, 0x38, 0xfb, 0xe2, 0xd6, 0xf7, 0x5e, 0x8b, 0xcc)]
	public partial interface TLUpdateStickerSetsOrder : TLUpdateBase
	{
		bool IsMasks { get; set; }

		TLUpdateStickerSetsOrderFlag Flags { get; set; }
		TLVector<Int64> Order { get; set; }
	}
#endif

}