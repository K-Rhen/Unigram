// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLUpdatesChannelDifferenceTooLong : ITLUpdatesChannelDifferenceBase, TLUpdatesChannelDifferenceTooLong, ITLReadMaxId 
	{
		public override bool IsFinal { get { return Flags.HasFlag(TLUpdatesChannelDifferenceTooLongFlag.Final); } set { Flags = value ? (Flags | TLUpdatesChannelDifferenceTooLongFlag.Final) : (Flags & ~TLUpdatesChannelDifferenceTooLongFlag.Final); } }
		public bool HasTimeout { get { return Flags.HasFlag(TLUpdatesChannelDifferenceTooLongFlag.Timeout); } set { Flags = value ? (Flags | TLUpdatesChannelDifferenceTooLongFlag.Timeout) : (Flags & ~TLUpdatesChannelDifferenceTooLongFlag.Timeout); } }

		public TLUpdatesChannelDifferenceTooLongFlag Flags { get; set; }
		public Int32 TopMessage { get; set; }
		public Int32 ReadInboxMaxId { get; set; }
		public Int32 ReadOutboxMaxId { get; set; }
		public Int32 UnreadCount { get; set; }
		public TLVector<TLMessageBase> Messages { get; set; }
		public TLVector<TLChatBase> Chats { get; set; }
		public TLVector<TLUserBase> Users { get; set; }

		public ITLUpdatesChannelDifferenceTooLong() { }
		public ITLUpdatesChannelDifferenceTooLong(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.UpdatesChannelDifferenceTooLong; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLUpdatesChannelDifferenceTooLongFlag)from.ReadInt32();
			Pts = from.ReadInt32();
			if (HasTimeout) Timeout = from.ReadInt32();
			TopMessage = from.ReadInt32();
			ReadInboxMaxId = from.ReadInt32();
			ReadOutboxMaxId = from.ReadInt32();
			UnreadCount = from.ReadInt32();
			Messages = TLFactory.Read<TLVector<TLMessageBase>>(from);
			Chats = TLFactory.Read<TLVector<TLChatBase>>(from);
			Users = TLFactory.Read<TLVector<TLUserBase>>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x410DEE07);
			to.Write((Int32)Flags);
			to.Write(Pts);
			if (HasTimeout) to.Write(Timeout.Value);
			to.Write(TopMessage);
			to.Write(ReadInboxMaxId);
			to.Write(ReadOutboxMaxId);
			to.Write(UnreadCount);
			to.WriteObject(Messages);
			to.WriteObject(Chats);
			to.WriteObject(Users);
		}

		private void UpdateFlags()
		{
			HasTimeout = Timeout != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLUpdatesChannelDifferenceTooLongFlag : Int32
	{
		Final = (1 << 0),
		Timeout = (1 << 1),
	}
#endif

#if !PORTABLE
	[Guid(0x87cdb580, 0x39b8, 0x0e6f, 0x03, 0x7a, 0x9a, 0x4f, 0xac, 0x0d, 0x25, 0x0d)]
	public partial interface TLUpdatesChannelDifferenceTooLong : TLUpdatesChannelDifferenceBase
	{
		bool HasTimeout { get; set; }

		TLUpdatesChannelDifferenceTooLongFlag Flags { get; set; }
		Int32 Pts { get; set; }
		Int32? Timeout { get; set; }
		Int32 TopMessage { get; set; }
		Int32 ReadInboxMaxId { get; set; }
		Int32 ReadOutboxMaxId { get; set; }
		Int32 UnreadCount { get; set; }
		TLVector<TLMessageBase> Messages { get; set; }
		TLVector<TLChatBase> Chats { get; set; }
		TLVector<TLUserBase> Users { get; set; }
	}
#endif

}