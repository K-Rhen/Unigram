// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Messages
{
	/// <summary>
	/// RCP method messages.sendInlineBotResult.
	/// Returns <see cref="Telegram.Api.TL.TLUpdatesBase"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessagesSendInlineBotResult : ITLObject, TLMessagesSendInlineBotResult
	{
		public bool IsSilent { get { return Flags.HasFlag(TLMessagesSendInlineBotResultFlag.Silent); } set { Flags = value ? (Flags | TLMessagesSendInlineBotResultFlag.Silent) : (Flags & ~TLMessagesSendInlineBotResultFlag.Silent); } }
		public bool IsBackground { get { return Flags.HasFlag(TLMessagesSendInlineBotResultFlag.Background); } set { Flags = value ? (Flags | TLMessagesSendInlineBotResultFlag.Background) : (Flags & ~TLMessagesSendInlineBotResultFlag.Background); } }
		public bool IsClearDraft { get { return Flags.HasFlag(TLMessagesSendInlineBotResultFlag.ClearDraft); } set { Flags = value ? (Flags | TLMessagesSendInlineBotResultFlag.ClearDraft) : (Flags & ~TLMessagesSendInlineBotResultFlag.ClearDraft); } }
		public bool HasReplyToMsgId { get { return Flags.HasFlag(TLMessagesSendInlineBotResultFlag.ReplyToMsgId); } set { Flags = value ? (Flags | TLMessagesSendInlineBotResultFlag.ReplyToMsgId) : (Flags & ~TLMessagesSendInlineBotResultFlag.ReplyToMsgId); } }

		public TLMessagesSendInlineBotResultFlag Flags { get; set; }
		public TLInputPeerBase Peer { get; set; }
		public Int32? ReplyToMsgId { get; set; }
		public Int64 RandomId { get; set; }
		public Int64 QueryId { get; set; }
		public String Id { get; set; }

		public ITLMessagesSendInlineBotResult() { }
		public ITLMessagesSendInlineBotResult(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessagesSendInlineBotResult; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessagesSendInlineBotResultFlag)from.ReadInt32();
			Peer = TLFactory.Read<TLInputPeerBase>(from);
			if (HasReplyToMsgId) ReplyToMsgId = from.ReadInt32();
			RandomId = from.ReadInt64();
			QueryId = from.ReadInt64();
			Id = from.ReadString();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0xB16E06FE);
			to.Write((Int32)Flags);
			to.WriteObject(Peer);
			if (HasReplyToMsgId) to.Write(ReplyToMsgId.Value);
			to.Write(RandomId);
			to.Write(QueryId);
			to.Write(Id);
		}

		private void UpdateFlags()
		{
			HasReplyToMsgId = ReplyToMsgId != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessagesSendInlineBotResultFlag : Int32
	{
		Silent = (1 << 5),
		Background = (1 << 6),
		ClearDraft = (1 << 7),
		ReplyToMsgId = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0xd35752d0, 0x0452, 0x6165, 0xb5, 0xbf, 0xa2, 0x65, 0x03, 0x22, 0xd8, 0x2d)]
	public partial interface TLMessagesSendInlineBotResult : TLObject
	{
		bool IsSilent { get; set; }
		bool IsBackground { get; set; }
		bool IsClearDraft { get; set; }
		bool HasReplyToMsgId { get; set; }

		TLMessagesSendInlineBotResultFlag Flags { get; set; }
		TLInputPeerBase Peer { get; set; }
		Int32? ReplyToMsgId { get; set; }
		Int64 RandomId { get; set; }
		Int64 QueryId { get; set; }
		String Id { get; set; }
	}
#endif

}