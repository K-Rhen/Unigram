// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Messages
{
	/// <summary>
	/// RCP method messages.sendEncryptedFile.
	/// Returns <see cref="Telegram.Api.TL.TLMessagesSentEncryptedMessage"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessagesSendEncryptedFile : ITLObject, TLMessagesSendEncryptedFile
	{
		public TLInputEncryptedChat Peer { get; set; }
		public Int64 RandomId { get; set; }
		public Byte[] Data { get; set; }
		public TLInputEncryptedFileBase File { get; set; }

		public ITLMessagesSendEncryptedFile() { }
		public ITLMessagesSendEncryptedFile(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessagesSendEncryptedFile; } }

		public override void Read(TLBinaryReader from)
		{
			Peer = TLFactory.Read<TLInputEncryptedChat>(from);
			RandomId = from.ReadInt64();
			Data = from.ReadByteArray();
			File = TLFactory.Read<TLInputEncryptedFileBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x9A901B66);
			to.WriteObject(Peer);
			to.Write(RandomId);
			to.WriteByteArray(Data);
			to.WriteObject(File);
		}
	}

#if !PORTABLE
	[Guid(0x52738c6c, 0x5a5a, 0xe520, 0xc5, 0x94, 0x46, 0x4d, 0xc3, 0x11, 0x0e, 0x18)]
	public partial interface TLMessagesSendEncryptedFile : TLObject
	{
		TLInputEncryptedChat Peer { get; set; }
		Int64 RandomId { get; set; }
		Byte[] Data { get; set; }
		TLInputEncryptedFileBase File { get; set; }
	}
#endif

}