// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Messages
{
	/// <summary>
	/// RCP method messages.saveRecentSticker.
	/// Returns <see cref="Telegram.Api.TL.TLBool"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessagesSaveRecentSticker : ITLObject, TLMessagesSaveRecentSticker
	{
		public bool IsAttached { get { return Flags.HasFlag(TLMessagesSaveRecentStickerFlag.Attached); } set { Flags = value ? (Flags | TLMessagesSaveRecentStickerFlag.Attached) : (Flags & ~TLMessagesSaveRecentStickerFlag.Attached); } }

		public TLMessagesSaveRecentStickerFlag Flags { get; set; }
		public TLInputDocumentBase Id { get; set; }
		public Boolean Unsave { get; set; }

		public ITLMessagesSaveRecentSticker() { }
		public ITLMessagesSaveRecentSticker(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessagesSaveRecentSticker; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessagesSaveRecentStickerFlag)from.ReadInt32();
			Id = TLFactory.Read<TLInputDocumentBase>(from);
			Unsave = from.ReadBoolean();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x392718F8);
			to.Write((Int32)Flags);
			to.WriteObject(Id);
			to.Write(Unsave);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessagesSaveRecentStickerFlag : Int32
	{
		Attached = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0x13ff06c5, 0xab4b, 0x6edd, 0x68, 0xab, 0x3e, 0x63, 0x50, 0xe9, 0x53, 0x05)]
	public partial interface TLMessagesSaveRecentSticker : TLObject
	{
		bool IsAttached { get; set; }

		TLMessagesSaveRecentStickerFlag Flags { get; set; }
		TLInputDocumentBase Id { get; set; }
		Boolean Unsave { get; set; }
	}
#endif

}