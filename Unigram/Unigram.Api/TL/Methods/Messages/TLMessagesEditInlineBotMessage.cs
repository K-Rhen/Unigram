// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Messages
{
	/// <summary>
	/// RCP method messages.editInlineBotMessage.
	/// Returns <see cref="Telegram.Api.TL.TLBool"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessagesEditInlineBotMessage : ITLObject, TLMessagesEditInlineBotMessage
	{
		public bool IsNoWebPage { get { return Flags.HasFlag(TLMessagesEditInlineBotMessageFlag.NoWebPage); } set { Flags = value ? (Flags | TLMessagesEditInlineBotMessageFlag.NoWebPage) : (Flags & ~TLMessagesEditInlineBotMessageFlag.NoWebPage); } }
		public bool HasMessage { get { return Flags.HasFlag(TLMessagesEditInlineBotMessageFlag.Message); } set { Flags = value ? (Flags | TLMessagesEditInlineBotMessageFlag.Message) : (Flags & ~TLMessagesEditInlineBotMessageFlag.Message); } }
		public bool HasReplyMarkup { get { return Flags.HasFlag(TLMessagesEditInlineBotMessageFlag.ReplyMarkup); } set { Flags = value ? (Flags | TLMessagesEditInlineBotMessageFlag.ReplyMarkup) : (Flags & ~TLMessagesEditInlineBotMessageFlag.ReplyMarkup); } }
		public bool HasEntities { get { return Flags.HasFlag(TLMessagesEditInlineBotMessageFlag.Entities); } set { Flags = value ? (Flags | TLMessagesEditInlineBotMessageFlag.Entities) : (Flags & ~TLMessagesEditInlineBotMessageFlag.Entities); } }

		public TLMessagesEditInlineBotMessageFlag Flags { get; set; }
		public TLInputBotInlineMessageID Id { get; set; }
		public String Message { get; set; }
		public TLReplyMarkupBase ReplyMarkup { get; set; }
		public TLVector<TLMessageEntityBase> Entities { get; set; }

		public ITLMessagesEditInlineBotMessage() { }
		public ITLMessagesEditInlineBotMessage(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessagesEditInlineBotMessage; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessagesEditInlineBotMessageFlag)from.ReadInt32();
			Id = TLFactory.Read<TLInputBotInlineMessageID>(from);
			if (HasMessage) Message = from.ReadString();
			if (HasReplyMarkup) ReplyMarkup = TLFactory.Read<TLReplyMarkupBase>(from);
			if (HasEntities) Entities = TLFactory.Read<TLVector<TLMessageEntityBase>>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x130C2C85);
			to.Write((Int32)Flags);
			to.WriteObject(Id);
			if (HasMessage) to.Write(Message);
			if (HasReplyMarkup) to.WriteObject(ReplyMarkup);
			if (HasEntities) to.WriteObject(Entities);
		}

		private void UpdateFlags()
		{
			HasMessage = Message != null;
			HasReplyMarkup = ReplyMarkup != null;
			HasEntities = Entities != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessagesEditInlineBotMessageFlag : Int32
	{
		NoWebPage = (1 << 1),
		Message = (1 << 11),
		ReplyMarkup = (1 << 2),
		Entities = (1 << 3),
	}
#endif

#if !PORTABLE
	[Guid(0x13ff06c5, 0xab4b, 0x6edd, 0x68, 0xab, 0x3e, 0x63, 0x50, 0xe9, 0x53, 0x05)]
	public partial interface TLMessagesEditInlineBotMessage : TLObject
	{
		bool IsNoWebPage { get; set; }
		bool HasMessage { get; set; }
		bool HasReplyMarkup { get; set; }
		bool HasEntities { get; set; }

		TLMessagesEditInlineBotMessageFlag Flags { get; set; }
		TLInputBotInlineMessageID Id { get; set; }
		String Message { get; set; }
		TLReplyMarkupBase ReplyMarkup { get; set; }
		TLVector<TLMessageEntityBase> Entities { get; set; }
	}
#endif

}