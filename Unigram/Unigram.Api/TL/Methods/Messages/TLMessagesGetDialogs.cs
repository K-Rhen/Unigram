// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Messages
{
	/// <summary>
	/// RCP method messages.getDialogs.
	/// Returns <see cref="Telegram.Api.TL.TLMessagesDialogs"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessagesGetDialogs : ITLObject, TLMessagesGetDialogs
	{
		public bool IsExcludePinned { get { return Flags.HasFlag(TLMessagesGetDialogsFlag.ExcludePinned); } set { Flags = value ? (Flags | TLMessagesGetDialogsFlag.ExcludePinned) : (Flags & ~TLMessagesGetDialogsFlag.ExcludePinned); } }

		public TLMessagesGetDialogsFlag Flags { get; set; }
		public Int32 OffsetDate { get; set; }
		public Int32 OffsetId { get; set; }
		public TLInputPeerBase OffsetPeer { get; set; }
		public Int32 Limit { get; set; }

		public ITLMessagesGetDialogs() { }
		public ITLMessagesGetDialogs(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessagesGetDialogs; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessagesGetDialogsFlag)from.ReadInt32();
			OffsetDate = from.ReadInt32();
			OffsetId = from.ReadInt32();
			OffsetPeer = TLFactory.Read<TLInputPeerBase>(from);
			Limit = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x191BA9C5);
			to.Write((Int32)Flags);
			to.Write(OffsetDate);
			to.Write(OffsetId);
			to.WriteObject(OffsetPeer);
			to.Write(Limit);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessagesGetDialogsFlag : Int32
	{
		ExcludePinned = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0xb2d2132c, 0x8bee, 0x5ad8, 0xb5, 0x83, 0xff, 0x4f, 0x5a, 0x1d, 0xfe, 0x27)]
	public partial interface TLMessagesGetDialogs : TLObject
	{
		bool IsExcludePinned { get; set; }

		TLMessagesGetDialogsFlag Flags { get; set; }
		Int32 OffsetDate { get; set; }
		Int32 OffsetId { get; set; }
		TLInputPeerBase OffsetPeer { get; set; }
		Int32 Limit { get; set; }
	}
#endif

}