// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Messages
{
	/// <summary>
	/// RCP method messages.setGameScore.
	/// Returns <see cref="Telegram.Api.TL.TLUpdatesBase"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessagesSetGameScore : ITLObject, TLMessagesSetGameScore
	{
		public bool IsEditMessage { get { return Flags.HasFlag(TLMessagesSetGameScoreFlag.EditMessage); } set { Flags = value ? (Flags | TLMessagesSetGameScoreFlag.EditMessage) : (Flags & ~TLMessagesSetGameScoreFlag.EditMessage); } }
		public bool IsForce { get { return Flags.HasFlag(TLMessagesSetGameScoreFlag.Force); } set { Flags = value ? (Flags | TLMessagesSetGameScoreFlag.Force) : (Flags & ~TLMessagesSetGameScoreFlag.Force); } }

		public TLMessagesSetGameScoreFlag Flags { get; set; }
		public TLInputPeerBase Peer { get; set; }
		public Int32 Id { get; set; }
		public TLInputUserBase UserId { get; set; }
		public Int32 Score { get; set; }

		public ITLMessagesSetGameScore() { }
		public ITLMessagesSetGameScore(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessagesSetGameScore; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessagesSetGameScoreFlag)from.ReadInt32();
			Peer = TLFactory.Read<TLInputPeerBase>(from);
			Id = from.ReadInt32();
			UserId = TLFactory.Read<TLInputUserBase>(from);
			Score = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x8EF8ECC0);
			to.Write((Int32)Flags);
			to.WriteObject(Peer);
			to.Write(Id);
			to.WriteObject(UserId);
			to.Write(Score);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessagesSetGameScoreFlag : Int32
	{
		EditMessage = (1 << 0),
		Force = (1 << 1),
	}
#endif

#if !PORTABLE
	[Guid(0xd35752d0, 0x0452, 0x6165, 0xb5, 0xbf, 0xa2, 0x65, 0x03, 0x22, 0xd8, 0x2d)]
	public partial interface TLMessagesSetGameScore : TLObject
	{
		bool IsEditMessage { get; set; }
		bool IsForce { get; set; }

		TLMessagesSetGameScoreFlag Flags { get; set; }
		TLInputPeerBase Peer { get; set; }
		Int32 Id { get; set; }
		TLInputUserBase UserId { get; set; }
		Int32 Score { get; set; }
	}
#endif

}