// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Messages
{
	/// <summary>
	/// RCP method messages.search.
	/// Returns <see cref="Telegram.Api.TL.TLMessagesMessages"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessagesSearch : ITLObject, TLMessagesSearch
	{
		public TLMessagesSearchFlag Flags { get; set; }
		public TLInputPeerBase Peer { get; set; }
		public String Q { get; set; }
		public TLMessagesFilterBase Filter { get; set; }
		public Int32 MinDate { get; set; }
		public Int32 MaxDate { get; set; }
		public Int32 Offset { get; set; }
		public Int32 MaxId { get; set; }
		public Int32 Limit { get; set; }

		public ITLMessagesSearch() { }
		public ITLMessagesSearch(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessagesSearch; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessagesSearchFlag)from.ReadInt32();
			Peer = TLFactory.Read<TLInputPeerBase>(from);
			Q = from.ReadString();
			Filter = TLFactory.Read<TLMessagesFilterBase>(from);
			MinDate = from.ReadInt32();
			MaxDate = from.ReadInt32();
			Offset = from.ReadInt32();
			MaxId = from.ReadInt32();
			Limit = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xD4569248);
			to.Write((Int32)Flags);
			to.WriteObject(Peer);
			to.Write(Q);
			to.WriteObject(Filter);
			to.Write(MinDate);
			to.Write(MaxDate);
			to.Write(Offset);
			to.Write(MaxId);
			to.Write(Limit);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessagesSearchFlag : Int32
	{
		None = 0
	}
#endif

#if !PORTABLE
	[Guid(0x136920a5, 0xc016, 0xafe2, 0x62, 0x0d, 0xf2, 0x74, 0x96, 0xa0, 0x45, 0x01)]
	public partial interface TLMessagesSearch : TLObject
	{
		TLMessagesSearchFlag Flags { get; set; }
		TLInputPeerBase Peer { get; set; }
		String Q { get; set; }
		TLMessagesFilterBase Filter { get; set; }
		Int32 MinDate { get; set; }
		Int32 MaxDate { get; set; }
		Int32 Offset { get; set; }
		Int32 MaxId { get; set; }
		Int32 Limit { get; set; }
	}
#endif

}