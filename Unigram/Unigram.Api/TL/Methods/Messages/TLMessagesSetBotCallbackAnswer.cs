// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Messages
{
	/// <summary>
	/// RCP method messages.setBotCallbackAnswer.
	/// Returns <see cref="Telegram.Api.TL.TLBool"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessagesSetBotCallbackAnswer : ITLObject, TLMessagesSetBotCallbackAnswer
	{
		public bool IsAlert { get { return Flags.HasFlag(TLMessagesSetBotCallbackAnswerFlag.Alert); } set { Flags = value ? (Flags | TLMessagesSetBotCallbackAnswerFlag.Alert) : (Flags & ~TLMessagesSetBotCallbackAnswerFlag.Alert); } }
		public bool HasMessage { get { return Flags.HasFlag(TLMessagesSetBotCallbackAnswerFlag.Message); } set { Flags = value ? (Flags | TLMessagesSetBotCallbackAnswerFlag.Message) : (Flags & ~TLMessagesSetBotCallbackAnswerFlag.Message); } }
		public bool HasUrl { get { return Flags.HasFlag(TLMessagesSetBotCallbackAnswerFlag.Url); } set { Flags = value ? (Flags | TLMessagesSetBotCallbackAnswerFlag.Url) : (Flags & ~TLMessagesSetBotCallbackAnswerFlag.Url); } }

		public TLMessagesSetBotCallbackAnswerFlag Flags { get; set; }
		public Int64 QueryId { get; set; }
		public String Message { get; set; }
		public String Url { get; set; }
		public Int32 CacheTime { get; set; }

		public ITLMessagesSetBotCallbackAnswer() { }
		public ITLMessagesSetBotCallbackAnswer(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessagesSetBotCallbackAnswer; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessagesSetBotCallbackAnswerFlag)from.ReadInt32();
			QueryId = from.ReadInt64();
			if (HasMessage) Message = from.ReadString();
			if (HasUrl) Url = from.ReadString();
			CacheTime = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0xD58F130A);
			to.Write((Int32)Flags);
			to.Write(QueryId);
			if (HasMessage) to.Write(Message);
			if (HasUrl) to.Write(Url);
			to.Write(CacheTime);
		}

		private void UpdateFlags()
		{
			HasMessage = Message != null;
			HasUrl = Url != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessagesSetBotCallbackAnswerFlag : Int32
	{
		Alert = (1 << 1),
		Message = (1 << 0),
		Url = (1 << 2),
	}
#endif

#if !PORTABLE
	[Guid(0x13ff06c5, 0xab4b, 0x6edd, 0x68, 0xab, 0x3e, 0x63, 0x50, 0xe9, 0x53, 0x05)]
	public partial interface TLMessagesSetBotCallbackAnswer : TLObject
	{
		bool IsAlert { get; set; }
		bool HasMessage { get; set; }
		bool HasUrl { get; set; }

		TLMessagesSetBotCallbackAnswerFlag Flags { get; set; }
		Int64 QueryId { get; set; }
		String Message { get; set; }
		String Url { get; set; }
		Int32 CacheTime { get; set; }
	}
#endif

}