// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Messages
{
	/// <summary>
	/// RCP method messages.setInlineBotResults.
	/// Returns <see cref="Telegram.Api.TL.TLBool"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessagesSetInlineBotResults : ITLObject, TLMessagesSetInlineBotResults
	{
		public bool IsGallery { get { return Flags.HasFlag(TLMessagesSetInlineBotResultsFlag.Gallery); } set { Flags = value ? (Flags | TLMessagesSetInlineBotResultsFlag.Gallery) : (Flags & ~TLMessagesSetInlineBotResultsFlag.Gallery); } }
		public bool IsPrivate { get { return Flags.HasFlag(TLMessagesSetInlineBotResultsFlag.Private); } set { Flags = value ? (Flags | TLMessagesSetInlineBotResultsFlag.Private) : (Flags & ~TLMessagesSetInlineBotResultsFlag.Private); } }
		public bool HasNextOffset { get { return Flags.HasFlag(TLMessagesSetInlineBotResultsFlag.NextOffset); } set { Flags = value ? (Flags | TLMessagesSetInlineBotResultsFlag.NextOffset) : (Flags & ~TLMessagesSetInlineBotResultsFlag.NextOffset); } }
		public bool HasSwitchPm { get { return Flags.HasFlag(TLMessagesSetInlineBotResultsFlag.SwitchPm); } set { Flags = value ? (Flags | TLMessagesSetInlineBotResultsFlag.SwitchPm) : (Flags & ~TLMessagesSetInlineBotResultsFlag.SwitchPm); } }

		public TLMessagesSetInlineBotResultsFlag Flags { get; set; }
		public Int64 QueryId { get; set; }
		public TLVector<TLInputBotInlineResultBase> Results { get; set; }
		public Int32 CacheTime { get; set; }
		public String NextOffset { get; set; }
		public TLInlineBotSwitchPM SwitchPm { get; set; }

		public ITLMessagesSetInlineBotResults() { }
		public ITLMessagesSetInlineBotResults(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessagesSetInlineBotResults; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessagesSetInlineBotResultsFlag)from.ReadInt32();
			QueryId = from.ReadInt64();
			Results = TLFactory.Read<TLVector<TLInputBotInlineResultBase>>(from);
			CacheTime = from.ReadInt32();
			if (HasNextOffset) NextOffset = from.ReadString();
			if (HasSwitchPm) SwitchPm = TLFactory.Read<TLInlineBotSwitchPM>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0xEB5EA206);
			to.Write((Int32)Flags);
			to.Write(QueryId);
			to.WriteObject(Results);
			to.Write(CacheTime);
			if (HasNextOffset) to.Write(NextOffset);
			if (HasSwitchPm) to.WriteObject(SwitchPm);
		}

		private void UpdateFlags()
		{
			HasNextOffset = NextOffset != null;
			HasSwitchPm = SwitchPm != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessagesSetInlineBotResultsFlag : Int32
	{
		Gallery = (1 << 0),
		Private = (1 << 1),
		NextOffset = (1 << 2),
		SwitchPm = (1 << 3),
	}
#endif

#if !PORTABLE
	[Guid(0x13ff06c5, 0xab4b, 0x6edd, 0x68, 0xab, 0x3e, 0x63, 0x50, 0xe9, 0x53, 0x05)]
	public partial interface TLMessagesSetInlineBotResults : TLObject
	{
		bool IsGallery { get; set; }
		bool IsPrivate { get; set; }
		bool HasNextOffset { get; set; }
		bool HasSwitchPm { get; set; }

		TLMessagesSetInlineBotResultsFlag Flags { get; set; }
		Int64 QueryId { get; set; }
		TLVector<TLInputBotInlineResultBase> Results { get; set; }
		Int32 CacheTime { get; set; }
		String NextOffset { get; set; }
		TLInlineBotSwitchPM SwitchPm { get; set; }
	}
#endif

}