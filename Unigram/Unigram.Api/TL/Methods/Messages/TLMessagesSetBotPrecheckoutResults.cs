// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Messages
{
	/// <summary>
	/// RCP method messages.setBotPrecheckoutResults.
	/// Returns <see cref="Telegram.Api.TL.TLBool"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessagesSetBotPrecheckoutResults : ITLObject, TLMessagesSetBotPrecheckoutResults
	{
		public bool IsSuccess { get { return Flags.HasFlag(TLMessagesSetBotPrecheckoutResultsFlag.Success); } set { Flags = value ? (Flags | TLMessagesSetBotPrecheckoutResultsFlag.Success) : (Flags & ~TLMessagesSetBotPrecheckoutResultsFlag.Success); } }
		public bool HasError { get { return Flags.HasFlag(TLMessagesSetBotPrecheckoutResultsFlag.Error); } set { Flags = value ? (Flags | TLMessagesSetBotPrecheckoutResultsFlag.Error) : (Flags & ~TLMessagesSetBotPrecheckoutResultsFlag.Error); } }

		public TLMessagesSetBotPrecheckoutResultsFlag Flags { get; set; }
		public Int64 QueryId { get; set; }
		public String Error { get; set; }

		public ITLMessagesSetBotPrecheckoutResults() { }
		public ITLMessagesSetBotPrecheckoutResults(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessagesSetBotPrecheckoutResults; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessagesSetBotPrecheckoutResultsFlag)from.ReadInt32();
			QueryId = from.ReadInt64();
			if (HasError) Error = from.ReadString();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x9C2DD95);
			to.Write((Int32)Flags);
			to.Write(QueryId);
			if (HasError) to.Write(Error);
		}

		private void UpdateFlags()
		{
			HasError = Error != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessagesSetBotPrecheckoutResultsFlag : Int32
	{
		Success = (1 << 1),
		Error = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0x13ff06c5, 0xab4b, 0x6edd, 0x68, 0xab, 0x3e, 0x63, 0x50, 0xe9, 0x53, 0x05)]
	public partial interface TLMessagesSetBotPrecheckoutResults : TLObject
	{
		bool IsSuccess { get; set; }
		bool HasError { get; set; }

		TLMessagesSetBotPrecheckoutResultsFlag Flags { get; set; }
		Int64 QueryId { get; set; }
		String Error { get; set; }
	}
#endif

}