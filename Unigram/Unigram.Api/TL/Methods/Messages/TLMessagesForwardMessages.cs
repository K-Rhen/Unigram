// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Messages
{
	/// <summary>
	/// RCP method messages.forwardMessages.
	/// Returns <see cref="Telegram.Api.TL.TLUpdatesBase"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessagesForwardMessages : ITLObject, TLMessagesForwardMessages
	{
		public bool IsSilent { get { return Flags.HasFlag(TLMessagesForwardMessagesFlag.Silent); } set { Flags = value ? (Flags | TLMessagesForwardMessagesFlag.Silent) : (Flags & ~TLMessagesForwardMessagesFlag.Silent); } }
		public bool IsBackground { get { return Flags.HasFlag(TLMessagesForwardMessagesFlag.Background); } set { Flags = value ? (Flags | TLMessagesForwardMessagesFlag.Background) : (Flags & ~TLMessagesForwardMessagesFlag.Background); } }
		public bool IsWithMyScore { get { return Flags.HasFlag(TLMessagesForwardMessagesFlag.WithMyScore); } set { Flags = value ? (Flags | TLMessagesForwardMessagesFlag.WithMyScore) : (Flags & ~TLMessagesForwardMessagesFlag.WithMyScore); } }

		public TLMessagesForwardMessagesFlag Flags { get; set; }
		public TLInputPeerBase FromPeer { get; set; }
		public TLVector<Int32> Id { get; set; }
		public TLVector<Int64> RandomId { get; set; }
		public TLInputPeerBase ToPeer { get; set; }

		public ITLMessagesForwardMessages() { }
		public ITLMessagesForwardMessages(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessagesForwardMessages; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessagesForwardMessagesFlag)from.ReadInt32();
			FromPeer = TLFactory.Read<TLInputPeerBase>(from);
			Id = TLFactory.Read<TLVector<Int32>>(from);
			RandomId = TLFactory.Read<TLVector<Int64>>(from);
			ToPeer = TLFactory.Read<TLInputPeerBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x708E0195);
			to.Write((Int32)Flags);
			to.WriteObject(FromPeer);
			to.WriteObject(Id);
			to.WriteObject(RandomId);
			to.WriteObject(ToPeer);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessagesForwardMessagesFlag : Int32
	{
		Silent = (1 << 5),
		Background = (1 << 6),
		WithMyScore = (1 << 8),
	}
#endif

#if !PORTABLE
	[Guid(0xd35752d0, 0x0452, 0x6165, 0xb5, 0xbf, 0xa2, 0x65, 0x03, 0x22, 0xd8, 0x2d)]
	public partial interface TLMessagesForwardMessages : TLObject
	{
		bool IsSilent { get; set; }
		bool IsBackground { get; set; }
		bool IsWithMyScore { get; set; }

		TLMessagesForwardMessagesFlag Flags { get; set; }
		TLInputPeerBase FromPeer { get; set; }
		TLVector<Int32> Id { get; set; }
		TLVector<Int64> RandomId { get; set; }
		TLInputPeerBase ToPeer { get; set; }
	}
#endif

}