// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Messages
{
	/// <summary>
	/// RCP method messages.deleteHistory.
	/// Returns <see cref="Telegram.Api.TL.TLMessagesAffectedHistory"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessagesDeleteHistory : ITLObject, TLMessagesDeleteHistory
	{
		public bool IsJustClear { get { return Flags.HasFlag(TLMessagesDeleteHistoryFlag.JustClear); } set { Flags = value ? (Flags | TLMessagesDeleteHistoryFlag.JustClear) : (Flags & ~TLMessagesDeleteHistoryFlag.JustClear); } }

		public TLMessagesDeleteHistoryFlag Flags { get; set; }
		public TLInputPeerBase Peer { get; set; }
		public Int32 MaxId { get; set; }

		public ITLMessagesDeleteHistory() { }
		public ITLMessagesDeleteHistory(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessagesDeleteHistory; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessagesDeleteHistoryFlag)from.ReadInt32();
			Peer = TLFactory.Read<TLInputPeerBase>(from);
			MaxId = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x1C015B09);
			to.Write((Int32)Flags);
			to.WriteObject(Peer);
			to.Write(MaxId);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessagesDeleteHistoryFlag : Int32
	{
		JustClear = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0x83405791, 0x3a6b, 0xb968, 0xf4, 0x51, 0x7e, 0x15, 0x6a, 0xef, 0x5e, 0xd2)]
	public partial interface TLMessagesDeleteHistory : TLObject
	{
		bool IsJustClear { get; set; }

		TLMessagesDeleteHistoryFlag Flags { get; set; }
		TLInputPeerBase Peer { get; set; }
		Int32 MaxId { get; set; }
	}
#endif

}