// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Messages
{
	/// <summary>
	/// RCP method messages.getArchivedStickers.
	/// Returns <see cref="Telegram.Api.TL.TLMessagesArchivedStickers"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLMessagesGetArchivedStickers : ITLObject, TLMessagesGetArchivedStickers
	{
		public bool IsMasks { get { return Flags.HasFlag(TLMessagesGetArchivedStickersFlag.Masks); } set { Flags = value ? (Flags | TLMessagesGetArchivedStickersFlag.Masks) : (Flags & ~TLMessagesGetArchivedStickersFlag.Masks); } }

		public TLMessagesGetArchivedStickersFlag Flags { get; set; }
		public Int64 OffsetId { get; set; }
		public Int32 Limit { get; set; }

		public ITLMessagesGetArchivedStickers() { }
		public ITLMessagesGetArchivedStickers(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessagesGetArchivedStickers; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLMessagesGetArchivedStickersFlag)from.ReadInt32();
			OffsetId = from.ReadInt64();
			Limit = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x57F17692);
			to.Write((Int32)Flags);
			to.Write(OffsetId);
			to.Write(Limit);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLMessagesGetArchivedStickersFlag : Int32
	{
		Masks = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0x828692b1, 0x562c, 0x3670, 0x93, 0x14, 0x14, 0x19, 0xfb, 0x12, 0x34, 0x94)]
	public partial interface TLMessagesGetArchivedStickers : TLObject
	{
		bool IsMasks { get; set; }

		TLMessagesGetArchivedStickersFlag Flags { get; set; }
		Int64 OffsetId { get; set; }
		Int32 Limit { get; set; }
	}
#endif

}