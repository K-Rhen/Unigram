// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Updates
{
	/// <summary>
	/// RCP method updates.getDifference.
	/// Returns <see cref="Telegram.Api.TL.TLUpdatesDifferenceBase"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLUpdatesGetDifference : ITLObject, TLUpdatesGetDifference
	{
		public bool HasPtsTotalLimit { get { return Flags.HasFlag(TLUpdatesGetDifferenceFlag.PtsTotalLimit); } set { Flags = value ? (Flags | TLUpdatesGetDifferenceFlag.PtsTotalLimit) : (Flags & ~TLUpdatesGetDifferenceFlag.PtsTotalLimit); } }

		public TLUpdatesGetDifferenceFlag Flags { get; set; }
		public Int32 Pts { get; set; }
		public Int32? PtsTotalLimit { get; set; }
		public Int32 Date { get; set; }
		public Int32 Qts { get; set; }

		public ITLUpdatesGetDifference() { }
		public ITLUpdatesGetDifference(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.UpdatesGetDifference; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLUpdatesGetDifferenceFlag)from.ReadInt32();
			Pts = from.ReadInt32();
			if (HasPtsTotalLimit) PtsTotalLimit = from.ReadInt32();
			Date = from.ReadInt32();
			Qts = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x25939651);
			to.Write((Int32)Flags);
			to.Write(Pts);
			if (HasPtsTotalLimit) to.Write(PtsTotalLimit.Value);
			to.Write(Date);
			to.Write(Qts);
		}

		private void UpdateFlags()
		{
			HasPtsTotalLimit = PtsTotalLimit != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLUpdatesGetDifferenceFlag : Int32
	{
		PtsTotalLimit = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0x7c8c2e4d, 0x8e8e, 0x99b6, 0x1d, 0x70, 0xe7, 0xfa, 0x4c, 0x7e, 0x35, 0xb8)]
	public partial interface TLUpdatesGetDifference : TLObject
	{
		bool HasPtsTotalLimit { get; set; }

		TLUpdatesGetDifferenceFlag Flags { get; set; }
		Int32 Pts { get; set; }
		Int32? PtsTotalLimit { get; set; }
		Int32 Date { get; set; }
		Int32 Qts { get; set; }
	}
#endif

}