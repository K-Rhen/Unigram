// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Updates
{
	/// <summary>
	/// RCP method updates.getChannelDifference.
	/// Returns <see cref="Telegram.Api.TL.TLUpdatesChannelDifferenceBase"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLUpdatesGetChannelDifference : ITLObject, TLUpdatesGetChannelDifference
	{
		public bool IsForce { get { return Flags.HasFlag(TLUpdatesGetChannelDifferenceFlag.Force); } set { Flags = value ? (Flags | TLUpdatesGetChannelDifferenceFlag.Force) : (Flags & ~TLUpdatesGetChannelDifferenceFlag.Force); } }

		public TLUpdatesGetChannelDifferenceFlag Flags { get; set; }
		public TLInputChannelBase Channel { get; set; }
		public TLChannelMessagesFilterBase Filter { get; set; }
		public Int32 Pts { get; set; }
		public Int32 Limit { get; set; }

		public ITLUpdatesGetChannelDifference() { }
		public ITLUpdatesGetChannelDifference(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.UpdatesGetChannelDifference; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLUpdatesGetChannelDifferenceFlag)from.ReadInt32();
			Channel = TLFactory.Read<TLInputChannelBase>(from);
			Filter = TLFactory.Read<TLChannelMessagesFilterBase>(from);
			Pts = from.ReadInt32();
			Limit = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x3173D78);
			to.Write((Int32)Flags);
			to.WriteObject(Channel);
			to.WriteObject(Filter);
			to.Write(Pts);
			to.Write(Limit);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLUpdatesGetChannelDifferenceFlag : Int32
	{
		Force = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0x87cdb580, 0x39b8, 0x0e6f, 0x03, 0x7a, 0x9a, 0x4f, 0xac, 0x0d, 0x25, 0x0d)]
	public partial interface TLUpdatesGetChannelDifference : TLObject
	{
		bool IsForce { get; set; }

		TLUpdatesGetChannelDifferenceFlag Flags { get; set; }
		TLInputChannelBase Channel { get; set; }
		TLChannelMessagesFilterBase Filter { get; set; }
		Int32 Pts { get; set; }
		Int32 Limit { get; set; }
	}
#endif

}