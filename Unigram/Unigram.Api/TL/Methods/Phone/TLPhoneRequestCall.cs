// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Phone
{
	/// <summary>
	/// RCP method phone.requestCall.
	/// Returns <see cref="Telegram.Api.TL.TLPhonePhoneCall"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLPhoneRequestCall : ITLObject, TLPhoneRequestCall
	{
		public TLInputUserBase UserId { get; set; }
		public Int32 RandomId { get; set; }
		public Byte[] GAHash { get; set; }
		public TLPhoneCallProtocol Protocol { get; set; }

		public ITLPhoneRequestCall() { }
		public ITLPhoneRequestCall(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.PhoneRequestCall; } }

		public override void Read(TLBinaryReader from)
		{
			UserId = TLFactory.Read<TLInputUserBase>(from);
			RandomId = from.ReadInt32();
			GAHash = from.ReadByteArray();
			Protocol = TLFactory.Read<TLPhoneCallProtocol>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x5B95B3D4);
			to.WriteObject(UserId);
			to.Write(RandomId);
			to.WriteByteArray(GAHash);
			to.WriteObject(Protocol);
		}
	}

#if !PORTABLE
	[Guid(0xebdda4e9, 0x46ed, 0x72c2, 0x72, 0x5c, 0x1a, 0x18, 0x1a, 0xcb, 0x60, 0x39)]
	public partial interface TLPhoneRequestCall : TLObject
	{
		TLInputUserBase UserId { get; set; }
		Int32 RandomId { get; set; }
		Byte[] GAHash { get; set; }
		TLPhoneCallProtocol Protocol { get; set; }
	}
#endif

}