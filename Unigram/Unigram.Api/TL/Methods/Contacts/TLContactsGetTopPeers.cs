// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Contacts
{
	/// <summary>
	/// RCP method contacts.getTopPeers.
	/// Returns <see cref="Telegram.Api.TL.TLContactsTopPeersBase"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLContactsGetTopPeers : ITLObject, TLContactsGetTopPeers
	{
		public bool IsCorrespondents { get { return Flags.HasFlag(TLContactsGetTopPeersFlag.Correspondents); } set { Flags = value ? (Flags | TLContactsGetTopPeersFlag.Correspondents) : (Flags & ~TLContactsGetTopPeersFlag.Correspondents); } }
		public bool IsBotsPm { get { return Flags.HasFlag(TLContactsGetTopPeersFlag.BotsPm); } set { Flags = value ? (Flags | TLContactsGetTopPeersFlag.BotsPm) : (Flags & ~TLContactsGetTopPeersFlag.BotsPm); } }
		public bool IsBotsInline { get { return Flags.HasFlag(TLContactsGetTopPeersFlag.BotsInline); } set { Flags = value ? (Flags | TLContactsGetTopPeersFlag.BotsInline) : (Flags & ~TLContactsGetTopPeersFlag.BotsInline); } }
		public bool IsGroups { get { return Flags.HasFlag(TLContactsGetTopPeersFlag.Groups); } set { Flags = value ? (Flags | TLContactsGetTopPeersFlag.Groups) : (Flags & ~TLContactsGetTopPeersFlag.Groups); } }
		public bool IsChannels { get { return Flags.HasFlag(TLContactsGetTopPeersFlag.Channels); } set { Flags = value ? (Flags | TLContactsGetTopPeersFlag.Channels) : (Flags & ~TLContactsGetTopPeersFlag.Channels); } }

		public TLContactsGetTopPeersFlag Flags { get; set; }
		public Int32 Offset { get; set; }
		public Int32 Limit { get; set; }
		public Int32 Hash { get; set; }

		public ITLContactsGetTopPeers() { }
		public ITLContactsGetTopPeers(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.ContactsGetTopPeers; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLContactsGetTopPeersFlag)from.ReadInt32();
			Offset = from.ReadInt32();
			Limit = from.ReadInt32();
			Hash = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xD4982DB5);
			to.Write((Int32)Flags);
			to.Write(Offset);
			to.Write(Limit);
			to.Write(Hash);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLContactsGetTopPeersFlag : Int32
	{
		Correspondents = (1 << 0),
		BotsPm = (1 << 1),
		BotsInline = (1 << 2),
		Groups = (1 << 10),
		Channels = (1 << 15),
	}
#endif

#if !PORTABLE
	[Guid(0x248b1a23, 0x281a, 0x78d9, 0xbe, 0x6e, 0x7d, 0x44, 0xd5, 0x8c, 0x28, 0x43)]
	public partial interface TLContactsGetTopPeers : TLObject
	{
		bool IsCorrespondents { get; set; }
		bool IsBotsPm { get; set; }
		bool IsBotsInline { get; set; }
		bool IsGroups { get; set; }
		bool IsChannels { get; set; }

		TLContactsGetTopPeersFlag Flags { get; set; }
		Int32 Offset { get; set; }
		Int32 Limit { get; set; }
		Int32 Hash { get; set; }
	}
#endif

}