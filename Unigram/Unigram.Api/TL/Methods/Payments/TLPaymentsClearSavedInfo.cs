// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Payments
{
	/// <summary>
	/// RCP method payments.clearSavedInfo.
	/// Returns <see cref="Telegram.Api.TL.TLBool"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLPaymentsClearSavedInfo : ITLObject, TLPaymentsClearSavedInfo
	{
		public bool IsCredentials { get { return Flags.HasFlag(TLPaymentsClearSavedInfoFlag.Credentials); } set { Flags = value ? (Flags | TLPaymentsClearSavedInfoFlag.Credentials) : (Flags & ~TLPaymentsClearSavedInfoFlag.Credentials); } }
		public bool IsInfo { get { return Flags.HasFlag(TLPaymentsClearSavedInfoFlag.Info); } set { Flags = value ? (Flags | TLPaymentsClearSavedInfoFlag.Info) : (Flags & ~TLPaymentsClearSavedInfoFlag.Info); } }

		public TLPaymentsClearSavedInfoFlag Flags { get; set; }

		public ITLPaymentsClearSavedInfo() { }
		public ITLPaymentsClearSavedInfo(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.PaymentsClearSavedInfo; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLPaymentsClearSavedInfoFlag)from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xD83D70C1);
			to.Write((Int32)Flags);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLPaymentsClearSavedInfoFlag : Int32
	{
		Credentials = (1 << 0),
		Info = (1 << 1),
	}
#endif

#if !PORTABLE
	[Guid(0x13ff06c5, 0xab4b, 0x6edd, 0x68, 0xab, 0x3e, 0x63, 0x50, 0xe9, 0x53, 0x05)]
	public partial interface TLPaymentsClearSavedInfo : TLObject
	{
		bool IsCredentials { get; set; }
		bool IsInfo { get; set; }

		TLPaymentsClearSavedInfoFlag Flags { get; set; }
	}
#endif

}