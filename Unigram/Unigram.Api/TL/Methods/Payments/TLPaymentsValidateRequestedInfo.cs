// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Payments
{
	/// <summary>
	/// RCP method payments.validateRequestedInfo.
	/// Returns <see cref="Telegram.Api.TL.TLPaymentsValidatedRequestedInfo"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLPaymentsValidateRequestedInfo : ITLObject, TLPaymentsValidateRequestedInfo
	{
		public bool IsSave { get { return Flags.HasFlag(TLPaymentsValidateRequestedInfoFlag.Save); } set { Flags = value ? (Flags | TLPaymentsValidateRequestedInfoFlag.Save) : (Flags & ~TLPaymentsValidateRequestedInfoFlag.Save); } }

		public TLPaymentsValidateRequestedInfoFlag Flags { get; set; }
		public Int32 MsgId { get; set; }
		public TLPaymentRequestedInfo Info { get; set; }

		public ITLPaymentsValidateRequestedInfo() { }
		public ITLPaymentsValidateRequestedInfo(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.PaymentsValidateRequestedInfo; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLPaymentsValidateRequestedInfoFlag)from.ReadInt32();
			MsgId = from.ReadInt32();
			Info = TLFactory.Read<TLPaymentRequestedInfo>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x770A8E74);
			to.Write((Int32)Flags);
			to.Write(MsgId);
			to.WriteObject(Info);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLPaymentsValidateRequestedInfoFlag : Int32
	{
		Save = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0x84e640ac, 0x9265, 0x4ea0, 0xb5, 0xa9, 0xce, 0xfc, 0x7f, 0x40, 0x1e, 0xdb)]
	public partial interface TLPaymentsValidateRequestedInfo : TLObject
	{
		bool IsSave { get; set; }

		TLPaymentsValidateRequestedInfoFlag Flags { get; set; }
		Int32 MsgId { get; set; }
		TLPaymentRequestedInfo Info { get; set; }
	}
#endif

}