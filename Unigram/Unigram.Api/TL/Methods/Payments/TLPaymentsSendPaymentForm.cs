// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Payments
{
	/// <summary>
	/// RCP method payments.sendPaymentForm.
	/// Returns <see cref="Telegram.Api.TL.TLPaymentsPaymentResult"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLPaymentsSendPaymentForm : ITLObject, TLPaymentsSendPaymentForm
	{
		public bool HasRequestedInfoId { get { return Flags.HasFlag(TLPaymentsSendPaymentFormFlag.RequestedInfoId); } set { Flags = value ? (Flags | TLPaymentsSendPaymentFormFlag.RequestedInfoId) : (Flags & ~TLPaymentsSendPaymentFormFlag.RequestedInfoId); } }
		public bool HasShippingOptionId { get { return Flags.HasFlag(TLPaymentsSendPaymentFormFlag.ShippingOptionId); } set { Flags = value ? (Flags | TLPaymentsSendPaymentFormFlag.ShippingOptionId) : (Flags & ~TLPaymentsSendPaymentFormFlag.ShippingOptionId); } }

		public TLPaymentsSendPaymentFormFlag Flags { get; set; }
		public Int32 MsgId { get; set; }
		public String RequestedInfoId { get; set; }
		public String ShippingOptionId { get; set; }
		public TLInputPaymentCredentialsBase Credentials { get; set; }

		public ITLPaymentsSendPaymentForm() { }
		public ITLPaymentsSendPaymentForm(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.PaymentsSendPaymentForm; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLPaymentsSendPaymentFormFlag)from.ReadInt32();
			MsgId = from.ReadInt32();
			if (HasRequestedInfoId) RequestedInfoId = from.ReadString();
			if (HasShippingOptionId) ShippingOptionId = from.ReadString();
			Credentials = TLFactory.Read<TLInputPaymentCredentialsBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x2B8879B3);
			to.Write((Int32)Flags);
			to.Write(MsgId);
			if (HasRequestedInfoId) to.Write(RequestedInfoId);
			if (HasShippingOptionId) to.Write(ShippingOptionId);
			to.WriteObject(Credentials);
		}

		private void UpdateFlags()
		{
			HasRequestedInfoId = RequestedInfoId != null;
			HasShippingOptionId = ShippingOptionId != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLPaymentsSendPaymentFormFlag : Int32
	{
		RequestedInfoId = (1 << 0),
		ShippingOptionId = (1 << 1),
	}
#endif

#if !PORTABLE
	[Guid(0x5c17b319, 0xf876, 0x1efa, 0xc5, 0xdb, 0x4d, 0xaf, 0x4d, 0xdf, 0x25, 0xb7)]
	public partial interface TLPaymentsSendPaymentForm : TLObject
	{
		bool HasRequestedInfoId { get; set; }
		bool HasShippingOptionId { get; set; }

		TLPaymentsSendPaymentFormFlag Flags { get; set; }
		Int32 MsgId { get; set; }
		String RequestedInfoId { get; set; }
		String ShippingOptionId { get; set; }
		TLInputPaymentCredentialsBase Credentials { get; set; }
	}
#endif

}