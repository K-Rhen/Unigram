// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Channels
{
	/// <summary>
	/// RCP method channels.createChannel.
	/// Returns <see cref="Telegram.Api.TL.TLUpdatesBase"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLChannelsCreateChannel : ITLObject, TLChannelsCreateChannel
	{
		public bool IsBroadcast { get { return Flags.HasFlag(TLChannelsCreateChannelFlag.Broadcast); } set { Flags = value ? (Flags | TLChannelsCreateChannelFlag.Broadcast) : (Flags & ~TLChannelsCreateChannelFlag.Broadcast); } }
		public bool IsMegaGroup { get { return Flags.HasFlag(TLChannelsCreateChannelFlag.MegaGroup); } set { Flags = value ? (Flags | TLChannelsCreateChannelFlag.MegaGroup) : (Flags & ~TLChannelsCreateChannelFlag.MegaGroup); } }

		public TLChannelsCreateChannelFlag Flags { get; set; }
		public String Title { get; set; }
		public String About { get; set; }

		public ITLChannelsCreateChannel() { }
		public ITLChannelsCreateChannel(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.ChannelsCreateChannel; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLChannelsCreateChannelFlag)from.ReadInt32();
			Title = from.ReadString();
			About = from.ReadString();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xF4893D7F);
			to.Write((Int32)Flags);
			to.Write(Title);
			to.Write(About);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLChannelsCreateChannelFlag : Int32
	{
		Broadcast = (1 << 0),
		MegaGroup = (1 << 1),
	}
#endif

#if !PORTABLE
	[Guid(0xd35752d0, 0x0452, 0x6165, 0xb5, 0xbf, 0xa2, 0x65, 0x03, 0x22, 0xd8, 0x2d)]
	public partial interface TLChannelsCreateChannel : TLObject
	{
		bool IsBroadcast { get; set; }
		bool IsMegaGroup { get; set; }

		TLChannelsCreateChannelFlag Flags { get; set; }
		String Title { get; set; }
		String About { get; set; }
	}
#endif

}