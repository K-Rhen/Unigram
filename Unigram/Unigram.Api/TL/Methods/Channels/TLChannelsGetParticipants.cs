// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods.Channels
{
	/// <summary>
	/// RCP method channels.getParticipants.
	/// Returns <see cref="Telegram.Api.TL.TLChannelsChannelParticipants"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLChannelsGetParticipants : ITLObject, TLChannelsGetParticipants
	{
		public TLInputChannelBase Channel { get; set; }
		public TLChannelParticipantsFilterBase Filter { get; set; }
		public Int32 Offset { get; set; }
		public Int32 Limit { get; set; }

		public ITLChannelsGetParticipants() { }
		public ITLChannelsGetParticipants(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.ChannelsGetParticipants; } }

		public override void Read(TLBinaryReader from)
		{
			Channel = TLFactory.Read<TLInputChannelBase>(from);
			Filter = TLFactory.Read<TLChannelParticipantsFilterBase>(from);
			Offset = from.ReadInt32();
			Limit = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x24D98F92);
			to.WriteObject(Channel);
			to.WriteObject(Filter);
			to.Write(Offset);
			to.Write(Limit);
		}
	}

#if !PORTABLE
	[Guid(0xed17027f, 0x86ab, 0xeb47, 0xb0, 0x64, 0x38, 0xc4, 0xdd, 0x71, 0x04, 0x3c)]
	public partial interface TLChannelsGetParticipants : TLObject
	{
		TLInputChannelBase Channel { get; set; }
		TLChannelParticipantsFilterBase Filter { get; set; }
		Int32 Offset { get; set; }
		Int32 Limit { get; set; }
	}
#endif

}