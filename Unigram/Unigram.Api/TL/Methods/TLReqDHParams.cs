// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL.Methods
{
	/// <summary>
	/// RCP method req_DH_params.
	/// Returns <see cref="Telegram.Api.TL.TLServerDHParamsBase"/>
	/// </summary>
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLReqDHParams : ITLObject, TLReqDHParams
	{
		public TLInt128 Nonce { get; set; }
		public TLInt128 ServerNonce { get; set; }
		public Byte[] P { get; set; }
		public Byte[] Q { get; set; }
		public Int64 PublicKeyFingerprint { get; set; }
		public Byte[] EncryptedData { get; set; }

		public ITLReqDHParams() { }
		public ITLReqDHParams(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.ReqDHParams; } }

		public override void Read(TLBinaryReader from)
		{
			Nonce = TLFactory.Read<TLInt128>(from);
			ServerNonce = TLFactory.Read<TLInt128>(from);
			P = from.ReadByteArray();
			Q = from.ReadByteArray();
			PublicKeyFingerprint = from.ReadInt64();
			EncryptedData = from.ReadByteArray();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xD712E4BE);
			to.WriteObject(Nonce);
			to.WriteObject(ServerNonce);
			to.WriteByteArray(P);
			to.WriteByteArray(Q);
			to.Write(PublicKeyFingerprint);
			to.WriteByteArray(EncryptedData);
		}
	}

#if !PORTABLE
	[Guid(0xf0257dbc, 0x2538, 0x9fe9, 0xfb, 0xef, 0x40, 0x12, 0x6e, 0x75, 0x53, 0xe3)]
	public partial interface TLReqDHParams : TLObject
	{
		TLInt128 Nonce { get; set; }
		TLInt128 ServerNonce { get; set; }
		Byte[] P { get; set; }
		Byte[] Q { get; set; }
		Int64 PublicKeyFingerprint { get; set; }
		Byte[] EncryptedData { get; set; }
	}
#endif

}