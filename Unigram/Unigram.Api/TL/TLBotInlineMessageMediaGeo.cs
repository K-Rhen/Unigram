// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLBotInlineMessageMediaGeo : ITLBotInlineMessageBase, TLBotInlineMessageMediaGeo 
	{
		public bool HasReplyMarkup { get { return Flags.HasFlag(TLBotInlineMessageMediaGeoFlag.ReplyMarkup); } set { Flags = value ? (Flags | TLBotInlineMessageMediaGeoFlag.ReplyMarkup) : (Flags & ~TLBotInlineMessageMediaGeoFlag.ReplyMarkup); } }

		public TLBotInlineMessageMediaGeoFlag Flags { get; set; }
		public TLGeoPointBase Geo { get; set; }

		public ITLBotInlineMessageMediaGeo() { }
		public ITLBotInlineMessageMediaGeo(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.BotInlineMessageMediaGeo; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLBotInlineMessageMediaGeoFlag)from.ReadInt32();
			Geo = TLFactory.Read<TLGeoPointBase>(from);
			if (HasReplyMarkup) ReplyMarkup = TLFactory.Read<TLReplyMarkupBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x3A8FD8B8);
			to.Write((Int32)Flags);
			to.WriteObject(Geo);
			if (HasReplyMarkup) to.WriteObject(ReplyMarkup);
		}

		private void UpdateFlags()
		{
			HasReplyMarkup = ReplyMarkup != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLBotInlineMessageMediaGeoFlag : Int32
	{
		ReplyMarkup = (1 << 2),
	}
#endif

#if !PORTABLE
	[Guid(0xaaeaed91, 0xa5b1, 0x94ae, 0xb9, 0x7c, 0x74, 0xcc, 0x41, 0xb3, 0xaf, 0x8a)]
	public partial interface TLBotInlineMessageMediaGeo : TLBotInlineMessageBase
	{
		bool HasReplyMarkup { get; set; }

		TLBotInlineMessageMediaGeoFlag Flags { get; set; }
		TLGeoPointBase Geo { get; set; }
		TLReplyMarkupBase ReplyMarkup { get; set; }
	}
#endif

}