// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLUpdatesChannelDifferenceEmpty : ITLUpdatesChannelDifferenceBase, TLUpdatesChannelDifferenceEmpty 
	{
		public override bool IsFinal { get { return Flags.HasFlag(TLUpdatesChannelDifferenceEmptyFlag.Final); } set { Flags = value ? (Flags | TLUpdatesChannelDifferenceEmptyFlag.Final) : (Flags & ~TLUpdatesChannelDifferenceEmptyFlag.Final); } }
		public bool HasTimeout { get { return Flags.HasFlag(TLUpdatesChannelDifferenceEmptyFlag.Timeout); } set { Flags = value ? (Flags | TLUpdatesChannelDifferenceEmptyFlag.Timeout) : (Flags & ~TLUpdatesChannelDifferenceEmptyFlag.Timeout); } }

		public TLUpdatesChannelDifferenceEmptyFlag Flags { get; set; }

		public ITLUpdatesChannelDifferenceEmpty() { }
		public ITLUpdatesChannelDifferenceEmpty(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.UpdatesChannelDifferenceEmpty; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLUpdatesChannelDifferenceEmptyFlag)from.ReadInt32();
			Pts = from.ReadInt32();
			if (HasTimeout) Timeout = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x3E11AFFB);
			to.Write((Int32)Flags);
			to.Write(Pts);
			if (HasTimeout) to.Write(Timeout.Value);
		}

		private void UpdateFlags()
		{
			HasTimeout = Timeout != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLUpdatesChannelDifferenceEmptyFlag : Int32
	{
		Final = (1 << 0),
		Timeout = (1 << 1),
	}
#endif

#if !PORTABLE
	[Guid(0x87cdb580, 0x39b8, 0x0e6f, 0x03, 0x7a, 0x9a, 0x4f, 0xac, 0x0d, 0x25, 0x0d)]
	public partial interface TLUpdatesChannelDifferenceEmpty : TLUpdatesChannelDifferenceBase
	{
		bool HasTimeout { get; set; }

		TLUpdatesChannelDifferenceEmptyFlag Flags { get; set; }
		Int32 Pts { get; set; }
		Int32? Timeout { get; set; }
	}
#endif

}