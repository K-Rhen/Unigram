// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLUpdateBotCallbackQuery : ITLUpdateBase, TLUpdateBotCallbackQuery 
	{
		public bool HasData { get { return Flags.HasFlag(TLUpdateBotCallbackQueryFlag.Data); } set { Flags = value ? (Flags | TLUpdateBotCallbackQueryFlag.Data) : (Flags & ~TLUpdateBotCallbackQueryFlag.Data); } }
		public bool HasGameShortName { get { return Flags.HasFlag(TLUpdateBotCallbackQueryFlag.GameShortName); } set { Flags = value ? (Flags | TLUpdateBotCallbackQueryFlag.GameShortName) : (Flags & ~TLUpdateBotCallbackQueryFlag.GameShortName); } }

		public TLUpdateBotCallbackQueryFlag Flags { get; set; }
		public Int64 QueryId { get; set; }
		public Int32 UserId { get; set; }
		public TLPeerBase Peer { get; set; }
		public Int32 MsgId { get; set; }
		public Int64 ChatInstance { get; set; }
		public Byte[] Data { get; set; }
		public String GameShortName { get; set; }

		public ITLUpdateBotCallbackQuery() { }
		public ITLUpdateBotCallbackQuery(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.UpdateBotCallbackQuery; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLUpdateBotCallbackQueryFlag)from.ReadInt32();
			QueryId = from.ReadInt64();
			UserId = from.ReadInt32();
			Peer = TLFactory.Read<TLPeerBase>(from);
			MsgId = from.ReadInt32();
			ChatInstance = from.ReadInt64();
			if (HasData) Data = from.ReadByteArray();
			if (HasGameShortName) GameShortName = from.ReadString();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0xE73547E1);
			to.Write((Int32)Flags);
			to.Write(QueryId);
			to.Write(UserId);
			to.WriteObject(Peer);
			to.Write(MsgId);
			to.Write(ChatInstance);
			if (HasData) to.WriteByteArray(Data);
			if (HasGameShortName) to.Write(GameShortName);
		}

		private void UpdateFlags()
		{
			HasData = Data != null;
			HasGameShortName = GameShortName != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLUpdateBotCallbackQueryFlag : Int32
	{
		Data = (1 << 0),
		GameShortName = (1 << 1),
	}
#endif

#if !PORTABLE
	[Guid(0x8340c33a, 0x292f, 0x15c1, 0x38, 0xfb, 0xe2, 0xd6, 0xf7, 0x5e, 0x8b, 0xcc)]
	public partial interface TLUpdateBotCallbackQuery : TLUpdateBase
	{
		bool HasData { get; set; }
		bool HasGameShortName { get; set; }

		TLUpdateBotCallbackQueryFlag Flags { get; set; }
		Int64 QueryId { get; set; }
		Int32 UserId { get; set; }
		TLPeerBase Peer { get; set; }
		Int32 MsgId { get; set; }
		Int64 ChatInstance { get; set; }
		Byte[] Data { get; set; }
		String GameShortName { get; set; }
	}
#endif

}