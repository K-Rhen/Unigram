// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLChatParticipantsForbidden : ITLChatParticipantsBase, TLChatParticipantsForbidden 
	{
		public bool HasSelfParticipant { get { return Flags.HasFlag(TLChatParticipantsForbiddenFlag.SelfParticipant); } set { Flags = value ? (Flags | TLChatParticipantsForbiddenFlag.SelfParticipant) : (Flags & ~TLChatParticipantsForbiddenFlag.SelfParticipant); } }

		public TLChatParticipantsForbiddenFlag Flags { get; set; }
		public TLChatParticipantBase SelfParticipant { get; set; }

		public ITLChatParticipantsForbidden() { }
		public ITLChatParticipantsForbidden(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.ChatParticipantsForbidden; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLChatParticipantsForbiddenFlag)from.ReadInt32();
			ChatId = from.ReadInt32();
			if (HasSelfParticipant) SelfParticipant = TLFactory.Read<TLChatParticipantBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0xFC900C2B);
			to.Write((Int32)Flags);
			to.Write(ChatId);
			if (HasSelfParticipant) to.WriteObject(SelfParticipant);
		}

		private void UpdateFlags()
		{
			HasSelfParticipant = SelfParticipant != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLChatParticipantsForbiddenFlag : Int32
	{
		SelfParticipant = (1 << 0),
	}
#endif

#if !PORTABLE
	[Guid(0x90514981, 0x8455, 0x2ee0, 0xe4, 0x06, 0x26, 0x7a, 0x82, 0xaf, 0x58, 0xbe)]
	public partial interface TLChatParticipantsForbidden : TLChatParticipantsBase
	{
		bool HasSelfParticipant { get; set; }

		TLChatParticipantsForbiddenFlag Flags { get; set; }
		Int32 ChatId { get; set; }
		TLChatParticipantBase SelfParticipant { get; set; }
	}
#endif

}