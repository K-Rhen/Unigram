// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLBotInlineResult : ITLBotInlineResultBase, TLBotInlineResult 
	{
		public bool HasTitle { get { return Flags.HasFlag(TLBotInlineResultFlag.Title); } set { Flags = value ? (Flags | TLBotInlineResultFlag.Title) : (Flags & ~TLBotInlineResultFlag.Title); } }
		public bool HasDescription { get { return Flags.HasFlag(TLBotInlineResultFlag.Description); } set { Flags = value ? (Flags | TLBotInlineResultFlag.Description) : (Flags & ~TLBotInlineResultFlag.Description); } }
		public bool HasUrl { get { return Flags.HasFlag(TLBotInlineResultFlag.Url); } set { Flags = value ? (Flags | TLBotInlineResultFlag.Url) : (Flags & ~TLBotInlineResultFlag.Url); } }
		public bool HasThumbUrl { get { return Flags.HasFlag(TLBotInlineResultFlag.ThumbUrl); } set { Flags = value ? (Flags | TLBotInlineResultFlag.ThumbUrl) : (Flags & ~TLBotInlineResultFlag.ThumbUrl); } }
		public bool HasContentUrl { get { return Flags.HasFlag(TLBotInlineResultFlag.ContentUrl); } set { Flags = value ? (Flags | TLBotInlineResultFlag.ContentUrl) : (Flags & ~TLBotInlineResultFlag.ContentUrl); } }
		public bool HasContentType { get { return Flags.HasFlag(TLBotInlineResultFlag.ContentType); } set { Flags = value ? (Flags | TLBotInlineResultFlag.ContentType) : (Flags & ~TLBotInlineResultFlag.ContentType); } }
		public bool HasW { get { return Flags.HasFlag(TLBotInlineResultFlag.W); } set { Flags = value ? (Flags | TLBotInlineResultFlag.W) : (Flags & ~TLBotInlineResultFlag.W); } }
		public bool HasH { get { return Flags.HasFlag(TLBotInlineResultFlag.H); } set { Flags = value ? (Flags | TLBotInlineResultFlag.H) : (Flags & ~TLBotInlineResultFlag.H); } }
		public bool HasDuration { get { return Flags.HasFlag(TLBotInlineResultFlag.Duration); } set { Flags = value ? (Flags | TLBotInlineResultFlag.Duration) : (Flags & ~TLBotInlineResultFlag.Duration); } }

		public TLBotInlineResultFlag Flags { get; set; }
		public String Url { get; set; }
		public String ThumbUrl { get; set; }
		public String ContentUrl { get; set; }
		public String ContentType { get; set; }
		public Int32? W { get; set; }
		public Int32? H { get; set; }
		public Int32? Duration { get; set; }

		public ITLBotInlineResult() { }
		public ITLBotInlineResult(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.BotInlineResult; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLBotInlineResultFlag)from.ReadInt32();
			Id = from.ReadString();
			Type = from.ReadString();
			if (HasTitle) Title = from.ReadString();
			if (HasDescription) Description = from.ReadString();
			if (HasUrl) Url = from.ReadString();
			if (HasThumbUrl) ThumbUrl = from.ReadString();
			if (HasContentUrl) ContentUrl = from.ReadString();
			if (HasContentType) ContentType = from.ReadString();
			if (HasW) W = from.ReadInt32();
			if (HasH) H = from.ReadInt32();
			if (HasDuration) Duration = from.ReadInt32();
			SendMessage = TLFactory.Read<TLBotInlineMessageBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x9BEBAEB9);
			to.Write((Int32)Flags);
			to.Write(Id);
			to.Write(Type);
			if (HasTitle) to.Write(Title);
			if (HasDescription) to.Write(Description);
			if (HasUrl) to.Write(Url);
			if (HasThumbUrl) to.Write(ThumbUrl);
			if (HasContentUrl) to.Write(ContentUrl);
			if (HasContentType) to.Write(ContentType);
			if (HasW) to.Write(W.Value);
			if (HasH) to.Write(H.Value);
			if (HasDuration) to.Write(Duration.Value);
			to.WriteObject(SendMessage);
		}

		private void UpdateFlags()
		{
			HasTitle = Title != null;
			HasDescription = Description != null;
			HasUrl = Url != null;
			HasThumbUrl = ThumbUrl != null;
			HasContentUrl = ContentUrl != null;
			HasContentType = ContentType != null;
			HasW = W != null;
			HasH = H != null;
			HasDuration = Duration != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLBotInlineResultFlag : Int32
	{
		Title = (1 << 1),
		Description = (1 << 2),
		Url = (1 << 3),
		ThumbUrl = (1 << 4),
		ContentUrl = (1 << 5),
		ContentType = (1 << 5),
		W = (1 << 6),
		H = (1 << 6),
		Duration = (1 << 7),
	}
#endif

#if !PORTABLE
	[Guid(0x540a2843, 0x7bb2, 0x02b0, 0x93, 0xdf, 0xae, 0xec, 0x54, 0x84, 0x8c, 0x96)]
	public partial interface TLBotInlineResult : TLBotInlineResultBase
	{
		bool HasTitle { get; set; }
		bool HasDescription { get; set; }
		bool HasUrl { get; set; }
		bool HasThumbUrl { get; set; }
		bool HasContentUrl { get; set; }
		bool HasContentType { get; set; }
		bool HasW { get; set; }
		bool HasH { get; set; }
		bool HasDuration { get; set; }

		TLBotInlineResultFlag Flags { get; set; }
		String Id { get; set; }
		String Type { get; set; }
		String Title { get; set; }
		String Description { get; set; }
		String Url { get; set; }
		String ThumbUrl { get; set; }
		String ContentUrl { get; set; }
		String ContentType { get; set; }
		Int32? W { get; set; }
		Int32? H { get; set; }
		Int32? Duration { get; set; }
		TLBotInlineMessageBase SendMessage { get; set; }
	}
#endif

}