// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLChatInvite : ITLChatInviteBase, TLChatInvite 
	{
		public bool IsChannel { get { return Flags.HasFlag(TLChatInviteFlag.Channel); } set { Flags = value ? (Flags | TLChatInviteFlag.Channel) : (Flags & ~TLChatInviteFlag.Channel); } }
		public bool IsBroadcast { get { return Flags.HasFlag(TLChatInviteFlag.Broadcast); } set { Flags = value ? (Flags | TLChatInviteFlag.Broadcast) : (Flags & ~TLChatInviteFlag.Broadcast); } }
		public bool IsPublic { get { return Flags.HasFlag(TLChatInviteFlag.Public); } set { Flags = value ? (Flags | TLChatInviteFlag.Public) : (Flags & ~TLChatInviteFlag.Public); } }
		public bool IsMegaGroup { get { return Flags.HasFlag(TLChatInviteFlag.MegaGroup); } set { Flags = value ? (Flags | TLChatInviteFlag.MegaGroup) : (Flags & ~TLChatInviteFlag.MegaGroup); } }
		public bool HasParticipants { get { return Flags.HasFlag(TLChatInviteFlag.Participants); } set { Flags = value ? (Flags | TLChatInviteFlag.Participants) : (Flags & ~TLChatInviteFlag.Participants); } }

		public TLChatInviteFlag Flags { get; set; }
		public String Title { get; set; }
		public TLChatPhotoBase Photo { get; set; }
		public Int32 ParticipantsCount { get; set; }
		public TLVector<TLUserBase> Participants { get; set; }

		public ITLChatInvite() { }
		public ITLChatInvite(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.ChatInvite; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLChatInviteFlag)from.ReadInt32();
			Title = from.ReadString();
			Photo = TLFactory.Read<TLChatPhotoBase>(from);
			ParticipantsCount = from.ReadInt32();
			if (HasParticipants) Participants = TLFactory.Read<TLVector<TLUserBase>>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0xDB74F558);
			to.Write((Int32)Flags);
			to.Write(Title);
			to.WriteObject(Photo);
			to.Write(ParticipantsCount);
			if (HasParticipants) to.WriteObject(Participants);
		}

		private void UpdateFlags()
		{
			HasParticipants = Participants != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLChatInviteFlag : Int32
	{
		Channel = (1 << 0),
		Broadcast = (1 << 1),
		Public = (1 << 2),
		MegaGroup = (1 << 3),
		Participants = (1 << 4),
	}
#endif

#if !PORTABLE
	[Guid(0x1933644a, 0xdc13, 0x2f7b, 0xa8, 0x04, 0x39, 0xe1, 0xc3, 0x1d, 0xde, 0xad)]
	public partial interface TLChatInvite : TLChatInviteBase
	{
		bool IsChannel { get; set; }
		bool IsBroadcast { get; set; }
		bool IsPublic { get; set; }
		bool IsMegaGroup { get; set; }
		bool HasParticipants { get; set; }

		TLChatInviteFlag Flags { get; set; }
		String Title { get; set; }
		TLChatPhotoBase Photo { get; set; }
		Int32 ParticipantsCount { get; set; }
		TLVector<TLUserBase> Participants { get; set; }
	}
#endif

}