// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLReplyKeyboardForceReply : ITLReplyMarkupBase, TLReplyKeyboardForceReply 
	{
		public bool IsSingleUse { get { return Flags.HasFlag(TLReplyKeyboardForceReplyFlag.SingleUse); } set { Flags = value ? (Flags | TLReplyKeyboardForceReplyFlag.SingleUse) : (Flags & ~TLReplyKeyboardForceReplyFlag.SingleUse); } }
		public bool IsSelective { get { return Flags.HasFlag(TLReplyKeyboardForceReplyFlag.Selective); } set { Flags = value ? (Flags | TLReplyKeyboardForceReplyFlag.Selective) : (Flags & ~TLReplyKeyboardForceReplyFlag.Selective); } }

		public TLReplyKeyboardForceReplyFlag Flags { get; set; }

		public ITLReplyKeyboardForceReply() { }
		public ITLReplyKeyboardForceReply(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.ReplyKeyboardForceReply; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLReplyKeyboardForceReplyFlag)from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xF4108AA0);
			to.Write((Int32)Flags);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLReplyKeyboardForceReplyFlag : Int32
	{
		SingleUse = (1 << 1),
		Selective = (1 << 2),
	}
#endif

#if !PORTABLE
	[Guid(0xbf780e09, 0x4654, 0x7369, 0xe6, 0x54, 0x8b, 0xb2, 0x75, 0x41, 0x0d, 0xf2)]
	public partial interface TLReplyKeyboardForceReply : TLReplyMarkupBase
	{
		bool IsSingleUse { get; set; }
		bool IsSelective { get; set; }

		TLReplyKeyboardForceReplyFlag Flags { get; set; }
	}
#endif

}