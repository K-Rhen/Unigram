// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLChannelMessagesFilter : ITLChannelMessagesFilterBase, TLChannelMessagesFilter 
	{
		public bool IsExcludeNewMessages { get { return Flags.HasFlag(TLChannelMessagesFilterFlag.ExcludeNewMessages); } set { Flags = value ? (Flags | TLChannelMessagesFilterFlag.ExcludeNewMessages) : (Flags & ~TLChannelMessagesFilterFlag.ExcludeNewMessages); } }

		public TLChannelMessagesFilterFlag Flags { get; set; }
		public TLVector<TLMessageRange> Ranges { get; set; }

		public ITLChannelMessagesFilter() { }
		public ITLChannelMessagesFilter(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.ChannelMessagesFilter; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLChannelMessagesFilterFlag)from.ReadInt32();
			Ranges = TLFactory.Read<TLVector<TLMessageRange>>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xCD77D957);
			to.Write((Int32)Flags);
			to.WriteObject(Ranges);
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLChannelMessagesFilterFlag : Int32
	{
		ExcludeNewMessages = (1 << 1),
	}
#endif

#if !PORTABLE
	[Guid(0xd1ec2232, 0x6918, 0xe69d, 0xa8, 0x87, 0xf4, 0x58, 0x29, 0xf0, 0x5b, 0xc0)]
	public partial interface TLChannelMessagesFilter : TLChannelMessagesFilterBase
	{
		bool IsExcludeNewMessages { get; set; }

		TLChannelMessagesFilterFlag Flags { get; set; }
		TLVector<TLMessageRange> Ranges { get; set; }
	}
#endif

}