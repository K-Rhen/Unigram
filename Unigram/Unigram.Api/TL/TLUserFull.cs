// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLUserFull : ITLObject, TLUserFull 
	{
		public bool IsBlocked { get { return Flags.HasFlag(TLUserFullFlag.Blocked); } set { Flags = value ? (Flags | TLUserFullFlag.Blocked) : (Flags & ~TLUserFullFlag.Blocked); } }
		public bool IsPhoneCallsAvailable { get { return Flags.HasFlag(TLUserFullFlag.PhoneCallsAvailable); } set { Flags = value ? (Flags | TLUserFullFlag.PhoneCallsAvailable) : (Flags & ~TLUserFullFlag.PhoneCallsAvailable); } }
		public bool IsPhoneCallsPrivate { get { return Flags.HasFlag(TLUserFullFlag.PhoneCallsPrivate); } set { Flags = value ? (Flags | TLUserFullFlag.PhoneCallsPrivate) : (Flags & ~TLUserFullFlag.PhoneCallsPrivate); } }
		public bool HasAbout { get { return Flags.HasFlag(TLUserFullFlag.About); } set { Flags = value ? (Flags | TLUserFullFlag.About) : (Flags & ~TLUserFullFlag.About); } }
		public bool HasProfilePhoto { get { return Flags.HasFlag(TLUserFullFlag.ProfilePhoto); } set { Flags = value ? (Flags | TLUserFullFlag.ProfilePhoto) : (Flags & ~TLUserFullFlag.ProfilePhoto); } }
		public bool HasBotInfo { get { return Flags.HasFlag(TLUserFullFlag.BotInfo); } set { Flags = value ? (Flags | TLUserFullFlag.BotInfo) : (Flags & ~TLUserFullFlag.BotInfo); } }

		public TLUserFullFlag Flags { get; set; }
		public TLUserBase User { get; set; }
		public String About { get; set; }
		public TLContactsLink Link { get; set; }
		public TLPhotoBase ProfilePhoto { get; set; }
		public TLPeerNotifySettingsBase NotifySettings { get; set; }
		public TLBotInfo BotInfo { get; set; }
		public Int32 CommonChatsCount { get; set; }

		public ITLUserFull() { }
		public ITLUserFull(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.UserFull; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLUserFullFlag)from.ReadInt32();
			User = TLFactory.Read<TLUserBase>(from);
			if (HasAbout) About = from.ReadString();
			Link = TLFactory.Read<TLContactsLink>(from);
			if (HasProfilePhoto) ProfilePhoto = TLFactory.Read<TLPhotoBase>(from);
			NotifySettings = TLFactory.Read<TLPeerNotifySettingsBase>(from);
			if (HasBotInfo) BotInfo = TLFactory.Read<TLBotInfo>(from);
			CommonChatsCount = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0xF220F3F);
			to.Write((Int32)Flags);
			to.WriteObject(User);
			if (HasAbout) to.Write(About);
			to.WriteObject(Link);
			if (HasProfilePhoto) to.WriteObject(ProfilePhoto);
			to.WriteObject(NotifySettings);
			if (HasBotInfo) to.WriteObject(BotInfo);
			to.Write(CommonChatsCount);
		}

		private void UpdateFlags()
		{
			HasAbout = About != null;
			HasProfilePhoto = ProfilePhoto != null;
			HasBotInfo = BotInfo != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLUserFullFlag : Int32
	{
		Blocked = (1 << 0),
		PhoneCallsAvailable = (1 << 4),
		PhoneCallsPrivate = (1 << 5),
		About = (1 << 1),
		ProfilePhoto = (1 << 2),
		BotInfo = (1 << 3),
	}
#endif

#if !PORTABLE
	[Guid(0xda813bb1, 0x6fbf, 0x27a6, 0x12, 0xea, 0xaf, 0x68, 0x75, 0xcc, 0xe7, 0x1d)]
	public partial interface TLUserFull : TLObject
	{
		bool IsBlocked { get; set; }
		bool IsPhoneCallsAvailable { get; set; }
		bool IsPhoneCallsPrivate { get; set; }
		bool HasAbout { get; set; }
		bool HasProfilePhoto { get; set; }
		bool HasBotInfo { get; set; }

		TLUserFullFlag Flags { get; set; }
		TLUserBase User { get; set; }
		String About { get; set; }
		TLContactsLink Link { get; set; }
		TLPhotoBase ProfilePhoto { get; set; }
		TLPeerNotifySettingsBase NotifySettings { get; set; }
		TLBotInfo BotInfo { get; set; }
		Int32 CommonChatsCount { get; set; }
	}
#endif

}