// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLServerDHInnerData : ITLObject, TLServerDHInnerData 
	{
		public TLInt128 Nonce { get; set; }
		public TLInt128 ServerNonce { get; set; }
		public Int32 G { get; set; }
		public Byte[] DHPrime { get; set; }
		public Byte[] GA { get; set; }
		public Int32 ServerTime { get; set; }

		public ITLServerDHInnerData() { }
		public ITLServerDHInnerData(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.ServerDHInnerData; } }

		public override void Read(TLBinaryReader from)
		{
			Nonce = TLFactory.Read<TLInt128>(from);
			ServerNonce = TLFactory.Read<TLInt128>(from);
			G = from.ReadInt32();
			DHPrime = from.ReadByteArray();
			GA = from.ReadByteArray();
			ServerTime = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xB5890DBA);
			to.WriteObject(Nonce);
			to.WriteObject(ServerNonce);
			to.Write(G);
			to.WriteByteArray(DHPrime);
			to.WriteByteArray(GA);
			to.Write(ServerTime);
		}
	}

#if !PORTABLE
	[Guid(0xb2087c3c, 0x9f64, 0x3fb0, 0xad, 0x03, 0xc0, 0xf0, 0xac, 0xbb, 0xd7, 0x03)]
	public partial interface TLServerDHInnerData : TLObject
	{
		TLInt128 Nonce { get; set; }
		TLInt128 ServerNonce { get; set; }
		Int32 G { get; set; }
		Byte[] DHPrime { get; set; }
		Byte[] GA { get; set; }
		Int32 ServerTime { get; set; }
	}
#endif

}