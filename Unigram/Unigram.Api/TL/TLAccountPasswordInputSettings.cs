// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLAccountPasswordInputSettings : ITLObject, TLAccountPasswordInputSettings 
	{
		public bool HasNewSalt { get { return Flags.HasFlag(TLAccountPasswordInputSettingsFlag.NewSalt); } set { Flags = value ? (Flags | TLAccountPasswordInputSettingsFlag.NewSalt) : (Flags & ~TLAccountPasswordInputSettingsFlag.NewSalt); } }
		public bool HasNewPasswordHash { get { return Flags.HasFlag(TLAccountPasswordInputSettingsFlag.NewPasswordHash); } set { Flags = value ? (Flags | TLAccountPasswordInputSettingsFlag.NewPasswordHash) : (Flags & ~TLAccountPasswordInputSettingsFlag.NewPasswordHash); } }
		public bool HasHint { get { return Flags.HasFlag(TLAccountPasswordInputSettingsFlag.Hint); } set { Flags = value ? (Flags | TLAccountPasswordInputSettingsFlag.Hint) : (Flags & ~TLAccountPasswordInputSettingsFlag.Hint); } }
		public bool HasEmail { get { return Flags.HasFlag(TLAccountPasswordInputSettingsFlag.Email); } set { Flags = value ? (Flags | TLAccountPasswordInputSettingsFlag.Email) : (Flags & ~TLAccountPasswordInputSettingsFlag.Email); } }

		public TLAccountPasswordInputSettingsFlag Flags { get; set; }
		public Byte[] NewSalt { get; set; }
		public Byte[] NewPasswordHash { get; set; }
		public String Hint { get; set; }
		public String Email { get; set; }

		public ITLAccountPasswordInputSettings() { }
		public ITLAccountPasswordInputSettings(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.AccountPasswordInputSettings; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLAccountPasswordInputSettingsFlag)from.ReadInt32();
			if (HasNewSalt) NewSalt = from.ReadByteArray();
			if (HasNewPasswordHash) NewPasswordHash = from.ReadByteArray();
			if (HasHint) Hint = from.ReadString();
			if (HasEmail) Email = from.ReadString();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x86916DEB);
			to.Write((Int32)Flags);
			if (HasNewSalt) to.WriteByteArray(NewSalt);
			if (HasNewPasswordHash) to.WriteByteArray(NewPasswordHash);
			if (HasHint) to.Write(Hint);
			if (HasEmail) to.Write(Email);
		}

		private void UpdateFlags()
		{
			HasNewSalt = NewSalt != null;
			HasNewPasswordHash = NewPasswordHash != null;
			HasHint = Hint != null;
			HasEmail = Email != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLAccountPasswordInputSettingsFlag : Int32
	{
		NewSalt = (1 << 0),
		NewPasswordHash = (1 << 0),
		Hint = (1 << 0),
		Email = (1 << 1),
	}
#endif

#if !PORTABLE
	[Guid(0xfedc5456, 0x3b03, 0x3d16, 0xe6, 0xc4, 0x70, 0xff, 0x5b, 0xdd, 0x34, 0xf3)]
	public partial interface TLAccountPasswordInputSettings : TLObject
	{
		bool HasNewSalt { get; set; }
		bool HasNewPasswordHash { get; set; }
		bool HasHint { get; set; }
		bool HasEmail { get; set; }

		TLAccountPasswordInputSettingsFlag Flags { get; set; }
		Byte[] NewSalt { get; set; }
		Byte[] NewPasswordHash { get; set; }
		String Hint { get; set; }
		String Email { get; set; }
	}
#endif

}