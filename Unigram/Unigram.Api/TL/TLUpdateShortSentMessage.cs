// <auto-generated/>
using System;
using Windows.Foundation.Metadata;

namespace Telegram.Api.TL
{
#if !PORTABLE
	internal
#else
	public
#endif
	partial class ITLUpdateShortSentMessage : ITLUpdatesBase, TLUpdateShortSentMessage, ITLMultiPts 
	{
		public bool IsOut { get { return Flags.HasFlag(TLUpdateShortSentMessageFlag.Out); } set { Flags = value ? (Flags | TLUpdateShortSentMessageFlag.Out) : (Flags & ~TLUpdateShortSentMessageFlag.Out); } }
		public bool HasMedia { get { return Flags.HasFlag(TLUpdateShortSentMessageFlag.Media); } set { Flags = value ? (Flags | TLUpdateShortSentMessageFlag.Media) : (Flags & ~TLUpdateShortSentMessageFlag.Media); } }
		public bool HasEntities { get { return Flags.HasFlag(TLUpdateShortSentMessageFlag.Entities); } set { Flags = value ? (Flags | TLUpdateShortSentMessageFlag.Entities) : (Flags & ~TLUpdateShortSentMessageFlag.Entities); } }

		public TLUpdateShortSentMessageFlag Flags { get; set; }
		public Int32 Id { get; set; }
		public Int32 Pts { get; set; }
		public Int32 PtsCount { get; set; }
		public Int32 Date { get; set; }
		public TLMessageMediaBase Media { get; set; }
		public TLVector<TLMessageEntityBase> Entities { get; set; }

		public ITLUpdateShortSentMessage() { }
		public ITLUpdateShortSentMessage(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.UpdateShortSentMessage; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (TLUpdateShortSentMessageFlag)from.ReadInt32();
			Id = from.ReadInt32();
			Pts = from.ReadInt32();
			PtsCount = from.ReadInt32();
			Date = from.ReadInt32();
			if (HasMedia) Media = TLFactory.Read<TLMessageMediaBase>(from);
			if (HasEntities) Entities = TLFactory.Read<TLVector<TLMessageEntityBase>>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x11F1331C);
			to.Write((Int32)Flags);
			to.Write(Id);
			to.Write(Pts);
			to.Write(PtsCount);
			to.Write(Date);
			if (HasMedia) to.WriteObject(Media);
			if (HasEntities) to.WriteObject(Entities);
		}

		private void UpdateFlags()
		{
			HasMedia = Media != null;
			HasEntities = Entities != null;
		}
	}

#if !PORTABLE
	[Flags]
	public enum TLUpdateShortSentMessageFlag : Int32
	{
		Out = (1 << 1),
		Media = (1 << 9),
		Entities = (1 << 7),
	}
#endif

#if !PORTABLE
	[Guid(0xd35752d0, 0x0452, 0x6165, 0xb5, 0xbf, 0xa2, 0x65, 0x03, 0x22, 0xd8, 0x2d)]
	public partial interface TLUpdateShortSentMessage : TLUpdatesBase
	{
		bool IsOut { get; set; }
		bool HasMedia { get; set; }
		bool HasEntities { get; set; }

		TLUpdateShortSentMessageFlag Flags { get; set; }
		Int32 Id { get; set; }
		Int32 Pts { get; set; }
		Int32 PtsCount { get; set; }
		Int32 Date { get; set; }
		TLMessageMediaBase Media { get; set; }
		TLVector<TLMessageEntityBase> Entities { get; set; }
	}
#endif

}